<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue2</title>
      <link href="/2022/09/29/vue2/"/>
      <url>/2022/09/29/vue2/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-2"><a href="#Vue-2" class="headerlink" title="Vue 2"></a>Vue 2</h1><h2 id="1-Vue-基础"><a href="#1-Vue-基础" class="headerlink" title="1. Vue 基础"></a>1. Vue 基础</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1) 环境准备"></a>1) 环境准备</h3><h4 id="安装脚手架"><a href="#安装脚手架" class="headerlink" title="安装脚手架"></a>安装脚手架</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><ul><li>-g 参数表示全局安装，这样在任意目录都可以使用 vue 脚本创建项目</li></ul><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>使用图形向导来创建 vue 项目，如下图，输入项目名</p><p><img src="D:\2022.js\imgs\image-20220815141136895.png" alt="image-20220815141136895"></p><p>选择手动配置项目</p><p><img src="D:\2022.js\imgs\image-20220815141312244.png" alt="image-20220815141312244"></p><p>添加 vue router 和 vuex</p><p><img src="D:\2022.js\imgs\image-20220815141412380.png" alt="image-20220815141412380"></p><p>选择版本，创建项目</p><p><img src="D:\2022.js\imgs\image-20220815141459878.png" alt="image-20220815141459878"></p><h4 id="安装-devtools"><a href="#安装-devtools" class="headerlink" title="安装 devtools"></a>安装 devtools</h4><ul><li>devtools 插件网址：<a href="https://devtools.vuejs.org/guide/installation.html">https://devtools.vuejs.org/guide/installation.html</a></li></ul><p><img src="D:\2022.js\imgs\image-20220815141648040.png" alt="image-20220815141648040"></p><h4 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h4><p>进入项目目录，执行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h4 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h4><p>前端服务器默认占用了 8080 端口，需要修改一下</p><ul><li><p>文档地址：<a href="https://webpack.js.org/configuration/dev-server/#devserverport">DevServer | webpack</a></p></li><li><p>打开 vue.config.js 添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">7070</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="添加代理"><a href="#添加代理" class="headerlink" title="添加代理"></a>添加代理</h4><p>为了避免前后端服务器联调时， fetch、xhr 请求产生跨域问题，需要配置代理</p><ul><li><p>文档地址同上</p></li><li><p>打开 vue.config.js 添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">7070</span>,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="Vue-项目结构"><a href="#Vue-项目结构" class="headerlink" title="Vue 项目结构"></a>Vue 项目结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PS D:\2022.js\代码\第3章\client&gt; tree src</span><br><span class="line">D:\2022.JS\代码\第3章\CLIENT\SRC</span><br><span class="line">├─assets</span><br><span class="line">├─components</span><br><span class="line">├─router</span><br><span class="line">├─store</span><br><span class="line">└─views</span><br></pre></td></tr></table></figure><ul><li>assets - 静态资源</li><li>components - 可重用组件</li><li>router - 路由</li><li>store - 数据共享</li><li>views - 视图组件</li></ul><p>以后还会添加</p><ul><li>api - 跟后台交互，发送 fetch、xhr 请求，接收响应</li><li>plugins - 插件</li></ul><h3 id="2-Vue-组件"><a href="#2-Vue-组件" class="headerlink" title="2) Vue 组件"></a>2) Vue 组件</h3><p>Vue 的组件文件以 .vue 结尾，每个组件由三部分组成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>template 模板部分，由它生成 html 代码</li><li>script 代码部分，控制模板的数据来源和行为</li><li>style 样式部分，一般不咋关心</li></ul><p>入口组件是 App.vue</p><p>先删除原有代码，来个 Hello, World 例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;Hello, Vue!&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>解释</p><ul><li>export default 导出组件对象，供 main.js 导入使用</li><li>这个对象有一个 data 方法，返回一个<strong>对象</strong>，给 template 提供数据</li><li><code>&#123;&#123;&#125;&#125;</code> 在 Vue 里称之为插值表达式，用来<strong>绑定</strong> data 方法返回的<strong>对象</strong>属性，<strong>绑定</strong>的含义是数据发生变化时，页面显示会同步变化</li></ul><h4 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; name &#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; age &gt; 60 ? &#x27;老年&#x27; : &#x27;青年&#x27; &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const options = &#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">        return &#123; name: &#x27;张三&#x27;, age: 70 &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&#123;&#123;&#125;&#125;</code> 里只能绑定一个属性，绑定多个属性需要用多个 <code>&#123;&#123;&#125;&#125;</code> 分别绑定</li><li>template 内只能有一个根元素</li><li>插值内可以进行简单的表达式计算</li></ul><h4 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&lt;input type=&quot;date&quot; v-bind:value=&quot;birthday&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&lt;input type=&quot;text&quot; :value=&quot;age&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const options = &#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">        return &#123; name: &#x27;王五&#x27;, birthday: &#x27;1995-05-01&#x27;, age: 20 &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>简写方式：可以省略 v-bind 只保留冒号</li></ul><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 事件绑定 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;input type=&quot;button&quot; value=&quot;点我执行m1&quot; v-on:click=&quot;m1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&lt;input type=&quot;button&quot; value=&quot;点我执行m2&quot; @click=&quot;m2&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const options = &#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">        return &#123; count: 0 &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        m1() &#123;</span><br><span class="line">            this.count ++;</span><br><span class="line">            console.log(&quot;m1&quot;)</span><br><span class="line">        &#125;,</span><br><span class="line">        m2() &#123;</span><br><span class="line">            this.count --;</span><br><span class="line">            console.log(&quot;m2&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>简写方式：可以把 v-on: 替换为 @</li><li>在 methods 方法中的 this 代表的是 data 函数返回的数据对象</li></ul><h4 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label for=&quot;&quot;&gt;请输入姓名&lt;/label&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label for=&quot;&quot;&gt;请输入年龄&lt;/label&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; v-model=&quot;age&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label for=&quot;&quot;&gt;请选择性别&lt;/label&gt;</span><br><span class="line">            男 &lt;input type=&quot;radio&quot; value=&quot;男&quot; v-model=&quot;sex&quot;&gt;</span><br><span class="line">            女 &lt;input type=&quot;radio&quot; value=&quot;女&quot; v-model=&quot;sex&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label for=&quot;&quot;&gt;请选择爱好&lt;/label&gt;</span><br><span class="line">            游泳 &lt;input type=&quot;checkbox&quot; value=&quot;游泳&quot; v-model=&quot;fav&quot;&gt;</span><br><span class="line">            打球 &lt;input type=&quot;checkbox&quot; value=&quot;打球&quot; v-model=&quot;fav&quot;&gt;</span><br><span class="line">            健身 &lt;input type=&quot;checkbox&quot; value=&quot;健身&quot; v-model=&quot;fav&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const options = &#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">        return &#123; name: &#x27;&#x27;, age: null, sex:&#x27;男&#x27; , fav:[&#x27;打球&#x27;]&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>用 v-model 实现双向绑定，即<ul><li>javascript 数据可以同步到表单标签</li><li>反过来用户在表单标签输入的新值也会同步到 javascript 这边</li></ul></li><li>双向绑定只适用于表单这种带【输入】功能的标签，其它标签的数据绑定，单向就足够了</li><li>复选框这种标签，双向绑定的 javascript 数据类型一般用数组</li></ul><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 计算属性 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const options = &#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">        return &#123; firstName: &#x27;三&#x27;, lastName: &#x27;张&#x27; &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    /* methods: &#123;</span><br><span class="line">        fullName() &#123;</span><br><span class="line">            console.log(&#x27;进入了 fullName&#x27;)</span><br><span class="line">            return this.lastName + this.firstName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,*/</span><br><span class="line">    computed: &#123;</span><br><span class="line">        fullName() &#123;</span><br><span class="line">            console.log(&#x27;进入了 fullName&#x27;)</span><br><span class="line">            return this.lastName + this.firstName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br></pre></td></tr></table></figure><ul><li>普通方法调用必须加 ()，没有缓存功能</li><li>计算属性使用时就把它当属性来用，不加 ()，有缓存功能：<ul><li>一次计算后，会将结果缓存，下次再计算时，只要数据没有变化，不会重新计算，直接返回缓存结果</li></ul></li></ul><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><p>axios 它的底层是用了 XMLHttpRequest（xhr）方式发送请求和接收响应，xhr 相对于之前讲过的 fetch api 来说，功能更强大，但由于是比较老的 api，不支持 Promise，axios 对 xhr 进行了封装，使之支持 Promise，并提供了对请求、响应的统一拦截功能</p><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios -S</span><br></pre></td></tr></table></figure><p>导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>axios 默认导出一个对象，这里的 import 导入的就是它默认导出的对象</li></ul><p>方法</p><table><thead><tr><th>请求</th><th>备注</th></tr></thead><tbody><tr><td>axios.get(url[, config])</td><td>:star:</td></tr><tr><td>axios.delete(url[, config])</td><td></td></tr><tr><td>axios.head(url[, config])</td><td></td></tr><tr><td>axios.options(url[, config])</td><td></td></tr><tr><td>axios.post(url[, data[, config]])</td><td>:star:</td></tr><tr><td>axios.put(url[, data[, config]])</td><td></td></tr><tr><td>axios.patch(url[, data[, config]])</td><td></td></tr></tbody></table><ul><li>config - 选项对象、例如查询参数、请求头…</li><li>data - 请求体数据、最常见的是 json 格式数据</li><li>get、head 请求无法携带请求体，这应当是浏览器的限制所致（xhr、fetch api 均有限制）</li><li>options、delete 请求可以通过 config 中的 data 携带请求体</li></ul><p>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sendReq()&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">const options = &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        async sendReq() &#123;</span><br><span class="line">            // 1. 演示 get, post</span><br><span class="line">            // const resp = await axios.post(&#x27;/api/a2&#x27;);</span><br><span class="line"></span><br><span class="line">            // 2. 发送请求头</span><br><span class="line">            // const resp = await axios.post(&#x27;/api/a3&#x27;,&#123;&#125;,&#123;</span><br><span class="line">            //     headers:&#123;</span><br><span class="line">            //         Authorization:&#x27;abc&#x27;</span><br><span class="line">            //     &#125;</span><br><span class="line">            // &#125;);</span><br><span class="line"></span><br><span class="line">            // 3. 发送请求时携带查询参数 ?name=xxx&amp;age=xxx</span><br><span class="line">            // const name = encodeURIComponent(&#x27;&amp;&amp;&amp;&#x27;);</span><br><span class="line">            // const age = 18;</span><br><span class="line">            // const resp = await axios.post(`/api/a4?name=$&#123;name&#125;&amp;age=$&#123;age&#125;`);</span><br><span class="line"></span><br><span class="line">            // 不想自己拼串、处理特殊字符、就用下面的办法</span><br><span class="line">            // const resp = await axios.post(&#x27;/api/a4&#x27;, &#123;&#125;, &#123;</span><br><span class="line">            //     params: &#123;</span><br><span class="line">            //         name:&#x27;&amp;&amp;&amp;&amp;&#x27;,</span><br><span class="line">            //         age: 20</span><br><span class="line">            //     &#125;</span><br><span class="line">            // &#125;);</span><br><span class="line"></span><br><span class="line">            // 4. 用请求体发数据，格式为 urlencoded</span><br><span class="line">            // const params = new URLSearchParams();</span><br><span class="line">            // params.append(&quot;name&quot;, &quot;张三&quot;);</span><br><span class="line">            // params.append(&quot;age&quot;, 24)</span><br><span class="line"></span><br><span class="line">            // const resp = await axios.post(&#x27;/api/a4&#x27;, params);</span><br><span class="line"></span><br><span class="line">            // 5. 用请求体发数据，格式为 multipart</span><br><span class="line">            // const params = new FormData();</span><br><span class="line">            // params.append(&quot;name&quot;, &quot;李四&quot;);</span><br><span class="line">            // params.append(&quot;age&quot;, 30);</span><br><span class="line">            // const resp = await axios.post(&#x27;/api/a5&#x27;, params);</span><br><span class="line"></span><br><span class="line">            // 6. 用请求体发数据，格式为 json</span><br><span class="line">            const resp = await axios.post(&#x27;/api/a5json&#x27;, &#123;</span><br><span class="line">                name: &#x27;王五&#x27;,</span><br><span class="line">                age: 50</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            console.log(resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>创建实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _axios = axios.<span class="title function_">create</span>(config);</span><br></pre></td></tr></table></figure><ul><li>axios 对象可以直接使用，但使用的是默认的设置</li><li>用 axios.create 创建的对象，可以覆盖默认设置，config 见下面说明</li></ul><p>常见的 config 项有</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>baseURL</td><td>将自动加在 url 前面</td></tr><tr><td>headers</td><td>请求头，类型为简单对象</td></tr><tr><td>params</td><td>跟在 URL 后的请求参数，类型为简单对象或 URLSearchParams</td></tr><tr><td>data</td><td>请求体，类型有简单对象、FormData、URLSearchParams、File 等</td></tr><tr><td>withCredentials</td><td>跨域时是否携带 Cookie 等凭证，默认为 false</td></tr><tr><td>responseType</td><td>响应类型，默认为 json</td></tr></tbody></table><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _axios = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">    <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">await</span> _axios.<span class="title function_">post</span>(<span class="string">&#x27;/api/a6set&#x27;</span>)</span><br><span class="line"><span class="keyword">await</span> _axios.<span class="title function_">post</span>(<span class="string">&#x27;/api/a6get&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>生产环境希望 xhr 请求不走代理，可以用 baseURL 统一修改</li><li>希望跨域请求携带 cookie，需要配置 withCredentials: true，服务器也要配置 allowCredentials &#x3D; true，否则浏览器获取跨域返回的 cookie 时会报错</li></ul><p>响应格式</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>data</td><td>响应体数据 :star:</td></tr><tr><td>status</td><td>状态码 :star:</td></tr><tr><td>headers</td><td>响应头</td></tr></tbody></table><ul><li>200 表示响应成功</li><li>400 请求数据不正确 age&#x3D;abc</li><li>401 身份验证没通过</li><li>403 没有权限</li><li>404 资源不存在</li><li>405 不支持请求方式 post</li><li>500 服务器内部错误</li></ul><p>请求拦截器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">_axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 比如在这里添加统一的 headers</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>响应拦截器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">_axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 2xx 范围内走这里</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 超出 2xx, 比如 4xx, 5xx 走这里</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sendReq()&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;title&quot;&gt;学生列表&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;thead&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;row bold&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;tbody&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;row&quot; v-if=&quot;students.length &gt; 0&quot;&gt;显示学生数据&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;row&quot; v-else&gt;暂无学生数据&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;../util/myaxios&#x27;</span><br><span class="line">const options = &#123;</span><br><span class="line">    data: function() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            students: []</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods : &#123;</span><br><span class="line">        async sendReq() &#123;</span><br><span class="line">            const resp = await axios.get(&quot;/api/students&quot;);</span><br><span class="line">            console.log(resp.data.data)</span><br><span class="line">            this.students = resp.data.data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    div &#123;</span><br><span class="line">        font-family: 华文行楷;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .title &#123;</span><br><span class="line">        margin-bottom: 10px;</span><br><span class="line">        font-size: 30px;</span><br><span class="line">        color: #333;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .row &#123;</span><br><span class="line">        background-color: #fff;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .col &#123;</span><br><span class="line">        border: 1px solid #f0f0f0;</span><br><span class="line">        width: 15%;</span><br><span class="line">        height: 35px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        line-height: 35px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .bold .col &#123;</span><br><span class="line">        background-color: #f1f1f1;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sendReq()&quot;&gt; --&gt;</span><br><span class="line">        &lt;div class=&quot;title&quot;&gt;学生列表&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;thead&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;row bold&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;tbody&quot;&gt;</span><br><span class="line">            &lt;div v-if=&quot;students.length &gt; 0&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;row&quot; v-for=&quot;s of students&quot; :key=&quot;s.id&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;s.id&#125;&#125;&lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;s.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;s.sex&#125;&#125;&lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;s.age&#125;&#125;&lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;row&quot; v-else&gt;暂无学生数据&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;../util/myaxios&#x27;</span><br><span class="line">const options = &#123;</span><br><span class="line">    mounted: function()&#123;</span><br><span class="line">        this.sendReq()</span><br><span class="line">    &#125;,</span><br><span class="line">    data: function() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            students: []</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods : &#123;</span><br><span class="line">        async sendReq() &#123;</span><br><span class="line">            const resp = await axios.get(&quot;/api/students&quot;);</span><br><span class="line">            console.log(resp.data.data)</span><br><span class="line">            this.students = resp.data.data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    div &#123;</span><br><span class="line">        font-family: 华文行楷;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .title &#123;</span><br><span class="line">        margin-bottom: 10px;</span><br><span class="line">        font-size: 30px;</span><br><span class="line">        color: #333;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .row &#123;</span><br><span class="line">        background-color: #fff;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .col &#123;</span><br><span class="line">        border: 1px solid #f0f0f0;</span><br><span class="line">        width: 15%;</span><br><span class="line">        height: 35px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        line-height: 35px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .bold .col &#123;</span><br><span class="line">        background-color: #f1f1f1;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>v-if 和 v-for 不能用于同一个标签</li><li>v-for 需要配合特殊的标签属性 key 一起使用，并且 key 属性要绑定到一个能起到唯一标识作用的数据上，本例绑定到了学生编号上</li><li>options 的 mounted 属性对应一个函数，此函数会在组件挂载后（准备就绪）被调用，可以在它内部发起请求，去获取学生数据</li></ul><h4 id="重用组件"><a href="#重用组件" class="headerlink" title="重用组件"></a>重用组件</h4><p>按钮组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;button&quot; :class=&quot;[type,size]&quot;&gt;</span><br><span class="line">        a&lt;slot&gt;&lt;/slot&gt;b</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const options = &#123;</span><br><span class="line">    props: [&quot;type&quot;, &quot;size&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>注意，省略了样式部分</li></ul><p>使用组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class="line">        &lt;my-button type=&quot;primary&quot; size=&quot;small&quot;&gt;1&lt;/my-button&gt;</span><br><span class="line">        &lt;my-button type=&quot;danger&quot; size=&quot;middle&quot;&gt;2&lt;/my-button&gt;</span><br><span class="line">        &lt;my-button type=&quot;success&quot; size=&quot;large&quot;&gt;3&lt;/my-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyButton from &#x27;../components/MyButton.vue&#x27;</span><br><span class="line">const options = &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        MyButton</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2-Vue-进阶"><a href="#2-Vue-进阶" class="headerlink" title="2. Vue 进阶"></a>2. Vue 进阶</h2><h3 id="1-ElementUI"><a href="#1-ElementUI" class="headerlink" title="1) ElementUI"></a>1) ElementUI</h3><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-ui -S</span><br></pre></td></tr></table></figure><p>引入组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Element</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Element</span>)</span><br></pre></td></tr></table></figure><p>测试，在自己的组件中使用 ElementUI 的组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button&gt;按钮&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><h4 id="表格组件"><a href="#表格组件" class="headerlink" title="表格组件"></a>表格组件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;el-table :data=&quot;students&quot;&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;编号&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;性别&quot; prop=&quot;sex&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;年龄&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">        &lt;/el-table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;../util/myaxios&#x27;</span><br><span class="line">const options = &#123;</span><br><span class="line">    async mounted() &#123;</span><br><span class="line">        const resp = await axios.get(&#x27;/api/students&#x27;);</span><br><span class="line">        this.students = resp.data.data</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            students: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="分页组件"><a href="#分页组件" class="headerlink" title="分页组件"></a>分页组件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;el-table v-bind:data=&quot;students&quot;&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;编号&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;性别&quot; prop=&quot;sex&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;年龄&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">        &lt;/el-table&gt;</span><br><span class="line">        &lt;el-pagination </span><br><span class="line">            :total=&quot;total&quot;</span><br><span class="line">            :page-size=&quot;queryDto.size&quot;</span><br><span class="line">            :current-page=&quot;queryDto.page&quot;</span><br><span class="line">            layout=&quot;prev,pager,next,sizes,-&gt;,total&quot;</span><br><span class="line">            :page-sizes=&quot;[5,10,15,20]&quot;</span><br><span class="line">            @current-change=&quot;currentChange&quot;</span><br><span class="line">            @size-change=&quot;sizeChange&quot;</span><br><span class="line">        &gt;&lt;/el-pagination&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;../util/myaxios&#x27;</span><br><span class="line">const options = &#123;</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.query();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        currentChange(page) &#123;</span><br><span class="line">            this.queryDto.page = page;</span><br><span class="line">            this.query();</span><br><span class="line">        &#125;,</span><br><span class="line">        sizeChange(size)&#123;</span><br><span class="line">            this.queryDto.size = size;</span><br><span class="line">            this.query();</span><br><span class="line">        &#125;,</span><br><span class="line">        async query() &#123;</span><br><span class="line">            const resp = await axios.get(&#x27;/api/students/q&#x27;, &#123;</span><br><span class="line">                params: this.queryDto</span><br><span class="line">            &#125;);</span><br><span class="line">            this.students = resp.data.data.list;</span><br><span class="line">            this.total = resp.data.data.total;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            students: [],</span><br><span class="line">            total: 0,</span><br><span class="line">            queryDto: &#123;</span><br><span class="line">                page: 1,</span><br><span class="line">                size: 5</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>三种情况都应该触发查询<ul><li>mounted 组件挂载完成后</li><li>页号变化时</li><li>页大小变化时</li></ul></li><li>查询传参应该根据后台需求，灵活采用不同方式<ul><li>本例中因为是 get 请求，无法采用请求体，只能用 params 方式传参</li></ul></li><li>返回响应的格式也许会很复杂，需要掌握【根据返回的响应结构，获取数据】的能力</li></ul><h4 id="分页搜索"><a href="#分页搜索" class="headerlink" title="分页搜索"></a>分页搜索</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;el-input placeholder=&quot;请输入姓名&quot; size=&quot;mini&quot; v-model=&quot;queryDto.name&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;el-select placeholder=&quot;请选择性别&quot; size=&quot;mini&quot; v-model=&quot;queryDto.sex&quot; clearable&gt;</span><br><span class="line">            &lt;el-option value=&quot;男&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">            &lt;el-option value=&quot;女&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">        &lt;/el-select&gt;</span><br><span class="line">        &lt;el-select placeholder=&quot;请选择年龄&quot; size=&quot;mini&quot; v-model=&quot;queryDto.age&quot; clearable&gt;</span><br><span class="line">            &lt;el-option value=&quot;0,20&quot; label=&quot;0到20岁&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">            &lt;el-option value=&quot;21,30&quot; label=&quot;21到30岁&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">            &lt;el-option value=&quot;31,40&quot; label=&quot;31到40岁&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">            &lt;el-option value=&quot;41,120&quot; label=&quot;41到120岁&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">        &lt;/el-select&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;search()&quot;&gt;搜索&lt;/el-button&gt;</span><br><span class="line">        &lt;el-divider&gt;&lt;/el-divider&gt;</span><br><span class="line">        &lt;el-table v-bind:data=&quot;students&quot;&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;编号&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;性别&quot; prop=&quot;sex&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;年龄&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">        &lt;/el-table&gt;</span><br><span class="line">        &lt;el-pagination :total=&quot;total&quot; :page-size=&quot;queryDto.size&quot; :current-page=&quot;queryDto.page&quot;</span><br><span class="line">            layout=&quot;prev,pager,next,sizes,-&gt;,total&quot; :page-sizes=&quot;[5, 10, 15, 20]&quot; @current-change=&quot;currentChange&quot;</span><br><span class="line">            @size-change=&quot;sizeChange&quot;&gt;&lt;/el-pagination&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;../util/myaxios&#x27;</span><br><span class="line">const options = &#123;</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.query();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        currentChange(page) &#123;</span><br><span class="line">            this.queryDto.page = page;</span><br><span class="line">            this.query();</span><br><span class="line">        &#125;,</span><br><span class="line">        sizeChange(size) &#123;</span><br><span class="line">            this.queryDto.size = size;</span><br><span class="line">            this.query();</span><br><span class="line">        &#125;,</span><br><span class="line">        async query() &#123;</span><br><span class="line">            const resp = await axios.get(&#x27;/api/students/q&#x27;, &#123;</span><br><span class="line">                params: this.queryDto</span><br><span class="line">            &#125;);</span><br><span class="line">            this.students = resp.data.data.list;</span><br><span class="line">            this.total = resp.data.data.total;</span><br><span class="line">        &#125;,</span><br><span class="line">        search() &#123;</span><br><span class="line">            this.query();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            students: [],</span><br><span class="line">            total: 0,</span><br><span class="line">            queryDto: &#123;</span><br><span class="line">                name: &#x27;&#x27;,</span><br><span class="line">                sex: &#x27;&#x27;,</span><br><span class="line">                age: &#x27;&#x27;,  </span><br><span class="line">                page: 1,</span><br><span class="line">                size: 5</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>sex 与  age 均用 <code>&#39;&#39;</code> 表示用户没有选择的情况</li><li>age 取值 <code>0,20</code> 会被 spring 转换为 <code>new int[]&#123;0, 20&#125;</code></li><li>age 取值 <code>&#39;&#39;</code> 会被 spring 转换为 <code>new int[0]</code></li></ul><h4 id="级联选择"><a href="#级联选择" class="headerlink" title="级联选择"></a>级联选择</h4><p>级联选择器中选项的数据结构为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">value</span>:<span class="number">100</span>, <span class="attr">label</span>:<span class="string">&#x27;主页&#x27;</span>,<span class="attr">children</span>:[</span><br><span class="line">        &#123;<span class="attr">value</span>:<span class="number">101</span>, <span class="attr">label</span>:<span class="string">&#x27;菜单1&#x27;</span>, <span class="attr">children</span>:[</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">105</span>, <span class="attr">label</span>:<span class="string">&#x27;子项1&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">106</span>, <span class="attr">label</span>:<span class="string">&#x27;子项2&#x27;</span>&#125;</span><br><span class="line">        ]&#125;,</span><br><span class="line">        &#123;<span class="attr">value</span>:<span class="number">102</span>, <span class="attr">label</span>:<span class="string">&#x27;菜单2&#x27;</span>, <span class="attr">children</span>:[</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">107</span>, <span class="attr">label</span>:<span class="string">&#x27;子项3&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">108</span>, <span class="attr">label</span>:<span class="string">&#x27;子项4&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">109</span>, <span class="attr">label</span>:<span class="string">&#x27;子项5&#x27;</span>&#125;</span><br><span class="line">        ]&#125;,</span><br><span class="line">        &#123;<span class="attr">value</span>:<span class="number">103</span>, <span class="attr">label</span>:<span class="string">&#x27;菜单3&#x27;</span>, <span class="attr">children</span>:[</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">110</span>, <span class="attr">label</span>:<span class="string">&#x27;子项6&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">111</span>, <span class="attr">label</span>:<span class="string">&#x27;子项7&#x27;</span>&#125;</span><br><span class="line">        ]&#125;,</span><br><span class="line">        &#123;<span class="attr">value</span>:<span class="number">104</span>, <span class="attr">label</span>:<span class="string">&#x27;菜单4&#x27;</span>&#125;</span><br><span class="line">    ]&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>下面的例子是将后端返回的一维数组【树化】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-cascader :options=&quot;ops&quot;&gt;&lt;/el-cascader&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;../util/myaxios&#x27;</span><br><span class="line">const options = &#123;</span><br><span class="line">    async mounted() &#123;</span><br><span class="line">        const resp = await axios.get(&#x27;/api/menu&#x27;)</span><br><span class="line">        console.log(resp.data.data)</span><br><span class="line">        const array = resp.data.data;</span><br><span class="line"></span><br><span class="line">        const map = new Map(); </span><br><span class="line"></span><br><span class="line">        // 1. 将所有数据存入 map 集合(为了接下来查找效率)</span><br><span class="line">        for(const &#123;id,name,pid&#125; of array) &#123;</span><br><span class="line">            map.set(id, &#123;value:id, label:name, pid:pid&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        // 2. 建立父子关系</span><br><span class="line">        // 3. 找到顶层对象</span><br><span class="line">        const top = [];</span><br><span class="line">        for(const obj of map.values()) &#123;</span><br><span class="line">            const parent = map.get(obj.pid);</span><br><span class="line">            if(parent !== undefined) &#123;</span><br><span class="line">                parent.children ??= [];</span><br><span class="line">                parent.children.push(obj);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                top.push(obj)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        this.ops = top;</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            ops: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-Vue-Router"><a href="#2-Vue-Router" class="headerlink" title="2) Vue-Router"></a>2) Vue-Router</h3><p>vue 属于单页面应用，所谓的路由，就是根据浏览器路径不同，用不同的<strong>视图组件</strong>替换这个页面内容展示</p><h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><p>新建一个路由 js 文件，例如 src&#x2F;router&#x2F;example14.js，内容如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ContainerView</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/example14/ContainerView.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LoginView</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/example14/LoginView.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFoundView</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/example14/NotFoundView.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">ContainerView</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">LoginView</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">NotFoundView</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><ul><li>最重要的就是建立了【路径】与【视图组件】之间的映射关系</li><li>本例中映射了 3 个路径与对应的视图组件</li></ul><p>在 main.js 中采用我们的路由 js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> e14 <span class="keyword">from</span> <span class="string">&#x27;./views/Example14View.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/example14&#x27;</span>  <span class="comment">// 修改这里</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Element</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Element</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(e14)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>根组件是 Example14View.vue，内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;all&quot;&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>样式略</li><li>其中 <code>&lt;router-view&gt;</code> 起到占位作用，改变路径后，这个路径对应的视图组件就会占据 <code>&lt;router-view&gt;</code> 的位置，替换掉它之前的内容</li></ul><h4 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/example14/ContainerView.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/example14/LoginView.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/example14/NotFoundView.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><ul><li>静态导入是将所有组件的 js 代码打包到一起，如果组件非常多，打包后的 js 文件会很大，影响页面加载速度</li><li>动态导入是将组件的 js 代码放入独立的文件，用到时才加载</li></ul><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><p>组件内再要切换内容，就需要用到嵌套路由（子路由），下面的例子是在【ContainerView 组件】内定义了 3 个子路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/example14/ContainerView.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/c/p1&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123; </span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;c/p1&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/example14/container/P1View.vue&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; </span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;c/p2&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/example14/container/P2View.vue&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; </span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;c/p3&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/example14/container/P3View.vue&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/example14/LoginView.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/example14/NotFoundView.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>子路由变化，切换的是【ContainerView 组件】中 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 部分的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>redirect 可以用来重定向（跳转）到一个新的地址</li><li>path 的取值为 * 表示匹配不到其它 path 时，就会匹配它</li></ul><h4 id="ElementUI-布局"><a href="#ElementUI-布局" class="headerlink" title="ElementUI 布局"></a>ElementUI 布局</h4><p>通常主页要做布局，下面的代码是 ElementUI 提供的【上-【左-右】】布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;el-container&gt;</span><br><span class="line">            &lt;el-header&gt;&lt;/el-header&gt;</span><br><span class="line">            &lt;el-container&gt;</span><br><span class="line">                &lt;el-aside width=&quot;200px&quot;&gt;&lt;/el-aside&gt;</span><br><span class="line">                &lt;el-main&gt;</span><br><span class="line">                    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">                &lt;/el-main&gt;</span><br><span class="line">            &lt;/el-container&gt;</span><br><span class="line">        &lt;/el-container&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h4><h5 id="标签式"><a href="#标签式" class="headerlink" title="标签式"></a>标签式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/c1/p1&quot;&gt;P1&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/c1/p2&quot;&gt;P2&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/c1/p3&quot;&gt;P3&lt;/router-link&gt;</span><br><span class="line">&lt;/el-aside&gt;</span><br></pre></td></tr></table></figure><h5 id="编程式"><a href="#编程式" class="headerlink" title="编程式"></a>编程式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-header&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-edit&quot; </span><br><span class="line">               circle size=&quot;mini&quot; @click=&quot;jump(&#x27;/c1/p1&#x27;)&quot;&gt;&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;success&quot; icon=&quot;el-icon-check&quot; </span><br><span class="line">               circle size=&quot;mini&quot; @click=&quot;jump(&#x27;/c1/p2&#x27;)&quot;&gt;&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;warning&quot; icon=&quot;el-icon-star-off&quot; </span><br><span class="line">               circle size=&quot;mini&quot; @click=&quot;jump(&#x27;/c1/p3&#x27;)&quot;&gt;&lt;/el-button&gt;</span><br><span class="line">&lt;/el-header&gt;</span><br></pre></td></tr></table></figure><p>jump 方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">const options = &#123;</span><br><span class="line">    methods : &#123;</span><br><span class="line">        jump(url) &#123;</span><br><span class="line">            this.$router.push(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>其中 this.$router 是拿到路由对象</li><li>push 方法根据 url 进行跳转</li></ul><h5 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-menu router background-color=&quot;#545c64&quot; text-color=&quot;#fff&quot; active-text-color=&quot;#ffd04b&quot;&gt;</span><br><span class="line">    &lt;el-submenu index=&quot;/c1&quot;&gt;</span><br><span class="line">        &lt;span slot=&quot;title&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;el-icon-platform-eleme&quot;&gt;&lt;/i&gt;</span><br><span class="line">            菜单1</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;el-menu-item index=&quot;/c1/p1&quot;&gt;子项1&lt;/el-menu-item&gt;</span><br><span class="line">        &lt;el-menu-item index=&quot;/c1/p2&quot;&gt;子项2&lt;/el-menu-item&gt;</span><br><span class="line">        &lt;el-menu-item index=&quot;/c1/p3&quot;&gt;子项3&lt;/el-menu-item&gt;</span><br><span class="line">    &lt;/el-submenu&gt;</span><br><span class="line">    &lt;el-menu-item index=&quot;/c2&quot;&gt;</span><br><span class="line">        &lt;span slot=&quot;title&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;el-icon-phone&quot;&gt;&lt;/i&gt;</span><br><span class="line">            菜单2</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/el-menu-item&gt;</span><br><span class="line">    &lt;el-menu-item index=&quot;/c3&quot;&gt;</span><br><span class="line">        &lt;span slot=&quot;title&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;el-icon-star-on&quot;&gt;&lt;/i&gt;</span><br><span class="line">            菜单3</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/el-menu-item&gt;</span><br><span class="line">&lt;/el-menu&gt;</span><br></pre></td></tr></table></figure><ul><li>图标和菜单项文字建议用 <code>&lt;span slot=&#39;title&#39;&gt;&lt;/span&gt;</code> 包裹起来</li><li><code>el-menu</code> 标签上加上 <code>router</code> 属性，表示结合导航菜单与路由对象，此时，就可以利用菜单项的 <code>index</code> 属性来路由跳转</li></ul><h4 id="动态路由与菜单"><a href="#动态路由与菜单" class="headerlink" title="动态路由与菜单"></a>动态路由与菜单</h4><p>将菜单、路由信息（仅主页的）存入数据库中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> menu(id, name, pid, path, component, icon) <span class="keyword">values</span></span><br><span class="line">    (<span class="number">101</span>, <span class="string">&#x27;菜单1&#x27;</span>, <span class="number">0</span>,   <span class="string">&#x27;/m1&#x27;</span>,    <span class="keyword">null</span>,         <span class="string">&#x27;el-icon-platform-eleme&#x27;</span>),</span><br><span class="line">    (<span class="number">102</span>, <span class="string">&#x27;菜单2&#x27;</span>, <span class="number">0</span>,   <span class="string">&#x27;/m2&#x27;</span>,    <span class="keyword">null</span>,         <span class="string">&#x27;el-icon-delete-solid&#x27;</span>),</span><br><span class="line">    (<span class="number">103</span>, <span class="string">&#x27;菜单3&#x27;</span>, <span class="number">0</span>,   <span class="string">&#x27;/m3&#x27;</span>,    <span class="keyword">null</span>,         <span class="string">&#x27;el-icon-s-tools&#x27;</span>),</span><br><span class="line">    (<span class="number">104</span>, <span class="string">&#x27;菜单4&#x27;</span>, <span class="number">0</span>,   <span class="string">&#x27;/m4&#x27;</span>,    <span class="string">&#x27;M4View.vue&#x27;</span>, <span class="string">&#x27;el-icon-user-solid&#x27;</span>),</span><br><span class="line">    (<span class="number">105</span>, <span class="string">&#x27;子项1&#x27;</span>, <span class="number">101</span>, <span class="string">&#x27;/m1/c1&#x27;</span>, <span class="string">&#x27;C1View.vue&#x27;</span>, <span class="string">&#x27;el-icon-s-goods&#x27;</span>),</span><br><span class="line">    (<span class="number">106</span>, <span class="string">&#x27;子项2&#x27;</span>, <span class="number">101</span>, <span class="string">&#x27;/m1/c2&#x27;</span>, <span class="string">&#x27;C2View.vue&#x27;</span>, <span class="string">&#x27;el-icon-menu&#x27;</span>),</span><br><span class="line">    (<span class="number">107</span>, <span class="string">&#x27;子项3&#x27;</span>, <span class="number">102</span>, <span class="string">&#x27;/m2/c3&#x27;</span>, <span class="string">&#x27;C3View.vue&#x27;</span>, <span class="string">&#x27;el-icon-s-marketing&#x27;</span>),</span><br><span class="line">    (<span class="number">108</span>, <span class="string">&#x27;子项4&#x27;</span>, <span class="number">102</span>, <span class="string">&#x27;/m2/c4&#x27;</span>, <span class="string">&#x27;C4View.vue&#x27;</span>, <span class="string">&#x27;el-icon-s-platform&#x27;</span>),</span><br><span class="line">    (<span class="number">109</span>, <span class="string">&#x27;子项5&#x27;</span>, <span class="number">102</span>, <span class="string">&#x27;/m2/c5&#x27;</span>, <span class="string">&#x27;C5View.vue&#x27;</span>, <span class="string">&#x27;el-icon-picture&#x27;</span>),</span><br><span class="line">    (<span class="number">110</span>, <span class="string">&#x27;子项6&#x27;</span>, <span class="number">103</span>, <span class="string">&#x27;/m3/c6&#x27;</span>, <span class="string">&#x27;C6View.vue&#x27;</span>, <span class="string">&#x27;el-icon-upload&#x27;</span>),</span><br><span class="line">    (<span class="number">111</span>, <span class="string">&#x27;子项7&#x27;</span>, <span class="number">103</span>, <span class="string">&#x27;/m3/c7&#x27;</span>, <span class="string">&#x27;C7View.vue&#x27;</span>, <span class="string">&#x27;el-icon-s-promotion&#x27;</span>);</span><br></pre></td></tr></table></figure><p>不同的用户查询的的菜单、路由信息是不一样的</p><p>例如：访问 <code>/api/menu/admin</code> 返回所有的数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">102</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;菜单2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;el-icon-delete-solid&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/m2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">107</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;子项3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;el-icon-s-marketing&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/m2/c3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span> <span class="number">102</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C3View.vue&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">108</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;子项4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;el-icon-s-platform&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/m2/c4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span> <span class="number">102</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C4View.vue&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">109</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;子项5&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;el-icon-picture&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/m2/c5&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span> <span class="number">102</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C5View.vue&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>访问 <code>/api/menu/wang</code> 返回</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">103</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;菜单3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;el-icon-s-tools&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/m3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">110</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;子项6&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;el-icon-upload&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/m3/c6&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span> <span class="number">103</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C6View.vue&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;子项7&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;el-icon-s-promotion&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/m3/c7&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span> <span class="number">103</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C7View.vue&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>前端根据他们身份不同，动态添加路由和显示菜单</p><h5 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">addServerRoutes</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> &#123; id, path, component &#125; <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="keyword">if</span> (component !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 动态添加路由</span></span><br><span class="line">      <span class="comment">// 参数1：父路由名称</span></span><br><span class="line">      <span class="comment">// 参数2：路由信息对象</span></span><br><span class="line">      router.<span class="title function_">addRoute</span>(<span class="string">&#x27;c&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">path</span>: path,</span><br><span class="line">        <span class="attr">name</span>: id,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">`@/views/example15/container/<span class="subst">$&#123;component&#125;</span>`</span>)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>js 这边只保留几个固定路由，如主页、404 和 login</li><li>以上方法执行时，将服务器返回的路由信息加入到名为 c 的父路由中去</li><li>这里要注意组件路径，前面 @&#x2F;views 是必须在 js 这边完成拼接的，否则 import 函数会失效</li></ul><h5 id="重置路由"><a href="#重置路由" class="headerlink" title="重置路由"></a>重置路由</h5><p>在用户注销时应当重置路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resetRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  router.<span class="property">matcher</span> = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123; routes &#125;).<span class="property">matcher</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="页面刷新"><a href="#页面刷新" class="headerlink" title="页面刷新"></a>页面刷新</h5><p>页面刷新后，会导致动态添加的路由失效，解决方法是将路由数据存入 sessionStorage</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;@/util/myaxios&#x27;</span><br><span class="line">import &#123;resetRouter, addServerRoutes&#125; from &#x27;@/router/example15&#x27;</span><br><span class="line">const options = &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            username: &#x27;admin&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        async login() &#123;       </span><br><span class="line">            resetRouter(); // 重置路由     </span><br><span class="line">            const resp = await axios.get(`/api/menu/$&#123;this.username&#125;`)</span><br><span class="line">            const array = resp.data.data;</span><br><span class="line">            // localStorage     即使浏览器关闭，存储的数据仍在</span><br><span class="line">            // sessionStorage   以标签页为单位，关闭标签页时，数据被清除</span><br><span class="line">            sessionStorage.setItem(&#x27;serverRoutes&#x27;, JSON.stringify(array))</span><br><span class="line">            addServerRoutes(array); // 动态添加路由</span><br><span class="line">            this.$router.push(&#x27;/&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>页面刷新，重新创建路由对象时，从 sessionStorage 里恢复路由数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 sessionStorage 中恢复路由数据</span></span><br><span class="line"><span class="keyword">const</span> serverRoutes = sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;serverRoutes&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(serverRoutes) &#123;</span><br><span class="line">  <span class="keyword">const</span> array = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(serverRoutes);</span><br><span class="line">  <span class="title function_">addServerRoutes</span>(array) <span class="comment">// 动态添加路由</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="动态菜单"><a href="#动态菜单" class="headerlink" title="动态菜单"></a>动态菜单</h5><p>代码部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">const options = &#123;</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        const serverRoutes = sessionStorage.getItem(&#x27;serverRoutes&#x27;);</span><br><span class="line">        const array = JSON.parse(serverRoutes);</span><br><span class="line">        const map = new Map();</span><br><span class="line">        for(const obj of array) &#123;</span><br><span class="line">            map.set(obj.id, obj);</span><br><span class="line">        &#125;</span><br><span class="line">        const top = [];</span><br><span class="line">        for(const obj of array) &#123;</span><br><span class="line">            const parent = map.get(obj.pid);</span><br><span class="line">            if(parent) &#123;</span><br><span class="line">                parent.children ??= [];</span><br><span class="line">                parent.children.push(obj);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                top.push(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        this.top = top;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            top: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>菜单部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-menu router background-color=&quot;#545c64&quot; text-color=&quot;#fff&quot; active-text-color=&quot;#ffd04b&quot; :unique-opened=&quot;true&quot;&gt;</span><br><span class="line">    &lt;template v-for=&quot;m1 of top&quot;&gt;</span><br><span class="line">&lt;el-submenu v-if=&quot;m1.children&quot; :key=&quot;m1.id&quot; :index=&quot;m1.path&quot;&gt;</span><br><span class="line">    &lt;span slot=&quot;title&quot;&gt;</span><br><span class="line">        &lt;i :class=&quot;m1.icon&quot;&gt;&lt;/i&gt; &#123;&#123;m1.name&#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;el-menu-item v-for=&quot;m2 of m1.children&quot; :key=&quot;m2.id&quot; :index=&quot;m2.path&quot;&gt;</span><br><span class="line">        &lt;span slot=&quot;title&quot;&gt;</span><br><span class="line">            &lt;i :class=&quot;m2.icon&quot;&gt;&lt;/i&gt; &#123;&#123;m2.name&#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;/el-menu-item&gt;</span><br><span class="line">        &lt;/el-submenu&gt;</span><br><span class="line">&lt;el-menu-item v-else :key=&quot;m1.id&quot; :index=&quot;m1.path&quot;&gt;</span><br><span class="line">    &lt;span slot=&quot;title&quot;&gt;</span><br><span class="line">        &lt;i :class=&quot;m1.icon&quot;&gt;&lt;/i&gt; &#123;&#123;m1.name&#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;/el-menu-item&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/el-menu&gt;</span><br></pre></td></tr></table></figure><ul><li>没有考虑递归菜单问题，认为菜单只有两级</li></ul><h3 id="3-Vuex"><a href="#3-Vuex" class="headerlink" title="3) Vuex"></a>3) Vuex</h3><h4 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h4><p>vuex 可以在多个组件之间共享数据，并且共享的数据是【响应式】的，即数据的变更能及时渲染到模板</p><ul><li>与之对比 localStorage 与 sessionStorage 也能共享数据，但缺点是数据并非【响应式】</li></ul><p>首先需要定义 state 与 mutations 他们一个用来读取共享数据，一个用来修改共享数据</p><p>src&#x2F;store&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  读取数据，走 state, getters</span></span><br><span class="line"><span class="comment">  修改数据，走 mutations, actions</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">updateName</span>(<span class="params">state, name</span>) &#123;</span><br><span class="line">      state.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>修改共享数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;p&quot;&gt;</span><br><span class="line">        &lt;el-input placeholder=&quot;请修改用户姓名&quot; </span><br><span class="line">            size=&quot;mini&quot; v-model=&quot;name&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;update()&quot;&gt;修改&lt;/el-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const options = &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        update()&#123;</span><br><span class="line">            this.$store.commit(&#x27;updateName&#x27;, this.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name:&#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>mutations 方法不能直接调用，只能通过 <code>store.commit(mutation方法名, 参数)</code> 来间接调用</li></ul><p>读取共享数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;el-container&gt;</span><br><span class="line">            &lt;el-header&gt;</span><br><span class="line">                &lt;div class=&quot;t&quot;&gt;</span><br><span class="line">                    欢迎您：&#123;&#123; $store.state.name &#125;&#125;, &#123;&#123; $store.state.age &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">            &lt;/el-header&gt;</span><br><span class="line">            &lt;el-container&gt;</span><br><span class="line">                &lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class="line">                &lt;/el-aside&gt;</span><br><span class="line">                &lt;el-main&gt;</span><br><span class="line">                    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">                &lt;/el-main&gt;</span><br><span class="line">            &lt;/el-container&gt;</span><br><span class="line">        &lt;/el-container&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h4><p>每次去写 <code>$store.state.name</code> 这样的代码显得非常繁琐，可以用 vuex 帮我们生成计算属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;el-container&gt;</span><br><span class="line">            &lt;el-header&gt;</span><br><span class="line">                &lt;div class=&quot;t&quot;&gt;欢迎您：&#123;&#123; name &#125;&#125;, &#123;&#123; age &#125;&#125;&lt;/div&gt;</span><br><span class="line">            &lt;/el-header&gt;</span><br><span class="line">            &lt;el-container&gt;</span><br><span class="line">                &lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class="line">                &lt;/el-aside&gt;</span><br><span class="line">                &lt;el-main&gt;</span><br><span class="line">                    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">                &lt;/el-main&gt;</span><br><span class="line">            &lt;/el-container&gt;</span><br><span class="line">        &lt;/el-container&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState &#125; from &#x27;vuex&#x27;</span><br><span class="line">const options = &#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">        ...mapState([&#x27;name&#x27;, &#x27;age&#x27;])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>mapState 返回的是一个对象，对象内包含了 name() 和 age() 的这两个方法作为计算属性</li><li>此对象配合 <code>...</code> 展开运算符，填充入 computed 即可使用</li></ul><h4 id="mapMutations"><a href="#mapMutations" class="headerlink" title="mapMutations"></a>mapMutations</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;p&quot;&gt;</span><br><span class="line">        &lt;el-input placeholder=&quot;请修改用户姓名&quot; </span><br><span class="line">            size=&quot;mini&quot; v-model=&quot;name&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;updateName(name)&quot;&gt;修改&lt;/el-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;mapMutations&#125; from &#x27;vuex&#x27;</span><br><span class="line">const options = &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        ...mapMutations([&#x27;updateName&#x27;])</span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name:&#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>类似的，调用 mutation 修改共享数据也可以简化</li><li>mapMutations 返回的对象中包含的方法，就会调用 store.commit() 来执行 mutation 方法</li><li>注意参数传递略有不同</li></ul><h4 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h4><p>mutations 方法内不能包括修改不能立刻生效的代码，否则会造成 Vuex 调试工具工作不准确，必须把这些代码写在 actions 方法中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  读取数据，走 state, getters</span></span><br><span class="line"><span class="comment">  修改数据，走 mutations, actions</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;@/util/myaxios&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">updateName</span>(<span class="params">state, name</span>) &#123;</span><br><span class="line">      state.<span class="property">name</span> = name;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 错误的用法，如果在mutations方法中包含了异步操作，会造成开发工具不准确</span></span><br><span class="line">    <span class="comment">/* async updateServerName(state) &#123;</span></span><br><span class="line"><span class="comment">      const resp = await axios.get(&#x27;/api/user&#x27;);</span></span><br><span class="line"><span class="comment">      const &#123;name, age&#125; = resp.data.data;</span></span><br><span class="line"><span class="comment">      state.name = name;</span></span><br><span class="line"><span class="comment">      state.age = age;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">    <span class="title function_">updateServerName</span>(<span class="params">state, user</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; name, age &#125; = user;</span><br><span class="line">      state.<span class="property">name</span> = name;</span><br><span class="line">      state.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">updateServerName</span>(<span class="params">context</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> resp = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/user&#x27;</span>);</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;updateServerName&#x27;</span>, resp.<span class="property">data</span>.<span class="property">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>首先应当调用 actions 的 updateServerName 获取数据</li><li>然后再由它间接调用 mutations 的 updateServerName 更新共享数据</li></ul><p>页面使用 actions 的方法可以这么写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;p&quot;&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot;</span><br><span class="line">            @click=&quot;updateServerName()&quot;&gt;从服务器获取数据,存入store&lt;/el-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapActions &#125; from &#x27;vuex&#x27;</span><br><span class="line">const options = &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        ...mapActions([&#x27;updateServerName&#x27;])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>mapActions 会生成调用 actions 中方法的代码</p></li><li><p>调用 actions 的代码内部等价于，它返回的是 Promise 对象，可以用同步或异步方式接收结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;action名称&#x27;</span>, 参数)</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-Vue-实战"><a href="#3-Vue-实战" class="headerlink" title="3. Vue 实战"></a>3. Vue 实战</h2><p>课程不准备从头开发一个 Vue 项目，这里我准备采用这样的教学方法：带着大家看一个较为典型的基于 Vue 的项目实现，分析其中几个重点流程</p><p>这里选择了 vue-element-admin 这个项目骨架，它采用的技术与我们之前学过的较为契合</p><ul><li>vue 2</li><li>element-ui 2</li><li>vue-router 3</li><li>vuex 3</li><li>axios</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/panjiachen/vue-element-admin.git client-action</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> client-action</span><br><span class="line"></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line">git checkout -b i18n remotes/origin/i18n</span><br><span class="line"></span><br><span class="line">git config --global url.&quot;https://&quot;.insteadOf git://</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><ul><li>需要切换分支到 i18n，否则不支持国际化（中文）功能</li><li>npm install 要多试几次，因为中间会连接 gitbub 下载一些依赖，网络不稳定会导致失败</li><li>npm run dev 运行后回自动打开浏览器，使用的端口是 9527</li></ul><h3 id="后端路径"><a href="#后端路径" class="headerlink" title="后端路径"></a>后端路径</h3><p>开发环境下执行下面命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><ul><li>会同时启动 mock-server</li></ul><p>在开发环境下，后端访问路径起始路径配置在文件 <code>.env.development</code> 中</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">VUE_APP_BASE_API</span> = <span class="string">&#x27;/dev-api&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>默认向后台的请求都发给 <code>http://localhost:9527/dev-api</code> 的 mock-server 获得的都是模拟数据</li><li>需要跟真实后台联调时，可以改动以上地址为 <code>VUE_APP_BASE_API = &#39;http://localhost:8080/api&#39;</code></li></ul><p>发送请求的 axios 工具被封装在 src&#x2F;utils&#x2F;request.js 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MessageBox</span>, <span class="title class_">Message</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// create an axios instance</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>, <span class="comment">// url = base url + request url</span></span><br><span class="line">  <span class="comment">// withCredentials: true, // send cookies when cross-domain requests</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span> <span class="comment">// request timeout</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>原有代码的 URI 路径都是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/vue-element-admin/user/login</span><br><span class="line">/vue-element-admin/user/info</span><br><span class="line">/vue-element-admin/user/logout</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如果觉得不爽，可以来一个全局替换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/user/login</span><br><span class="line">/user/info</span><br><span class="line">/user/logout</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>token 的请求头修改一下，在 src&#x2F;utils&#x2F;request.js 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something before request is sent</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">token</span>) &#123;</span><br><span class="line">      <span class="comment">// let each request carry token</span></span><br><span class="line">      <span class="comment">// [&#x27;X-Token&#x27;] is a custom headers key</span></span><br><span class="line">      <span class="comment">// please modify it according to the actual situation</span></span><br><span class="line">      config.<span class="property">headers</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="title function_">getToken</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something with request error</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error) <span class="comment">// for debug</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="登录流程"><a href="#登录流程" class="headerlink" title="登录流程"></a>登录流程</h3><h4 id="1-src-views-login-index-vue"><a href="#1-src-views-login-index-vue" class="headerlink" title="1. src/views/login/index.vue"></a>1. <code>src/views/login/index.vue</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; validUsername &#125; from &#x27;@/utils/validate&#x27;</span><br><span class="line">import LangSelect from &#x27;@/components/LangSelect&#x27;</span><br><span class="line">import SocialSign from &#x27;./components/SocialSignin&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // ...</span><br><span class="line">  methods: &#123;    </span><br><span class="line">    handleLogin() &#123;</span><br><span class="line">      this.$refs.loginForm.validate(valid =&gt; &#123;</span><br><span class="line">        if (valid) &#123;</span><br><span class="line">          this.loading = true</span><br><span class="line">          this.$store.dispatch(&#x27;user/login&#x27;, this.loginForm)</span><br><span class="line">            .then(() =&gt; &#123;</span><br><span class="line">              this.$router.push(&#123; path: this.redirect || &#x27;/&#x27;, query: this.otherQuery &#125;)</span><br><span class="line">              this.loading = false</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(() =&gt; &#123;</span><br><span class="line">              this.loading = false</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          console.log(&#x27;error submit!!&#x27;)</span><br><span class="line">          return false</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这里调用了 store 的 actions，<code>user/login</code></p><ul><li>因为是异步调用，因此只能用 actions</li><li>登录成功会优先跳转至 this.redirect 路径、否则跳转至 &#x2F;</li><li>&#x2F; 查看 <code>src/router/index.js</code> 的路由表可知，会重定向至 &#x2F;dashboard</li></ul><h4 id="2-src-store-modules-user-js"><a href="#2-src-store-modules-user-js" class="headerlink" title="2. src/store/modules/user.js"></a>2. <code>src/store/modules/user.js</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; login, logout, getInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/user&#x27;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// user login</span></span><br><span class="line">  <span class="title function_">login</span>(<span class="params">&#123; commit &#125;, userInfo</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = userInfo</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">login</span>(&#123; <span class="attr">username</span>: username.<span class="title function_">trim</span>(), <span class="attr">password</span>: password &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; data &#125; = response</span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;SET_TOKEN&#x27;</span>, data.<span class="property">token</span>)</span><br><span class="line">        <span class="title function_">setToken</span>(data.<span class="property">token</span>)</span><br><span class="line">        <span class="title function_">resolve</span>()</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>发请求用了 <code>src/api/user.js</code>，请求成功使用 commit 将 token 存入 mutations，同时往 cookie 存储了一份</li><li>这里的 response 其实是真正的 response.data，见后面的说明</li><li>评价<ul><li>向 cookie 或 sessionStorage 存储 token 即可，token 无需做成响应式，不必放入 store</li><li>作者使用了 Promise API，其实可以改变为 await 方式，提高可读性</li></ul></li></ul><h4 id="3-src-api-user-js"><a href="#3-src-api-user-js" class="headerlink" title="3. src/api/user.js"></a>3. <code>src/api/user.js</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/user/login&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><ul><li>其中 request 相当于我们之前封装的 myaxios</li></ul><h4 id="4-src-utils-request-js"><a href="#4-src-utils-request-js" class="headerlink" title="4. src/utils/request.js"></a>4. <code>src/utils/request.js</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MessageBox</span>, <span class="title class_">Message</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// create an axios instance</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>, <span class="comment">// url = base url + request url</span></span><br><span class="line">  <span class="comment">// withCredentials: true, // send cookies when cross-domain requests</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span> <span class="comment">// request timeout</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... </span></span><br><span class="line"></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = response.<span class="property">data</span></span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span> !== <span class="number">20000</span>) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><ul><li>其中响应拦截器发现响应正确，返回 resp.data 这样，其它处代码解构时少了一层 data</li></ul><h4 id="5-src-permission-js"><a href="#5-src-permission-js" class="headerlink" title="5. src/permission.js"></a>5. <code>src/permission.js</code></h4><p>登录成功后，只是获得了 token，还未获取用户信息，获取用户信息是在路由跳转的 beforeEach 里做的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram </span><br><span class="line"></span><br><span class="line">participant c as 登录页</span><br><span class="line">participant r as Router</span><br><span class="line">participant s as Store</span><br><span class="line">participant t as Tomcat</span><br><span class="line"></span><br><span class="line">rect rgba(255,0,0,0.2)</span><br><span class="line">c -&gt;&gt; +s: login(username,password)</span><br><span class="line">s -&gt;&gt; +t: login(username,password)</span><br><span class="line">t --&gt;&gt; -s: token</span><br><span class="line">s -&gt;&gt; s: 存储 token</span><br><span class="line">s --&gt;&gt; -c: </span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rect rgba(0,255,0,0.2)</span><br><span class="line">c -&gt;&gt; +r: 跳转至 /</span><br><span class="line">r -&gt;&gt; +s: beforeEach getInfo(token)</span><br><span class="line">s -&gt;&gt; +t: getInfo(token)</span><br><span class="line">t --&gt;&gt; -s: name,avatar,roles等</span><br><span class="line">s -&gt;&gt; s: 存储用户信息</span><br><span class="line">s --&gt;&gt; -r: </span><br><span class="line">r -&gt;&gt; r: 根据roles动态生成路由</span><br><span class="line">r --&gt;&gt; -c: </span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关键代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="title function_">async</span>(to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> hasToken = <span class="title function_">getToken</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasToken) &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">const</span> &#123; roles &#125; = <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/getInfo&#x27;</span>)</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>登录后跳转至 &#x2F; 之前进入这里的 beforeEach 方法，方法内主要做两件事<ul><li>一是调用 actions 方法获取用户角色，见 6</li><li>二是根据用户角色，动态生成路由，见 7</li></ul></li></ul><h4 id="6-src-store-modules-user-js"><a href="#6-src-store-modules-user-js" class="headerlink" title="6. src/store/modules/user.js"></a>6. <code>src/store/modules/user.js</code></h4><p>这里用其中 getInfo 方法获取用户信息，其中角色返回给 beforeEach</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; login, logout, getInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/user&#x27;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="title function_">getInfo</span>(<span class="params">&#123; commit, state &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">getInfo</span>(state.<span class="property">token</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; data &#125; = response</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="string">&#x27;Verification failed, please Login again.&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; roles, name, avatar, introduction &#125; = data</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!roles || roles.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="string">&#x27;getInfo: roles must be a non-null array!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;SET_ROLES&#x27;</span>, roles)</span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;SET_NAME&#x27;</span>, name)</span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;SET_AVATAR&#x27;</span>, avatar)</span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;SET_INTRODUCTION&#x27;</span>, introduction)</span><br><span class="line">        <span class="title function_">resolve</span>(data)</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-src-router-index-js"><a href="#7-src-router-index-js" class="headerlink" title="7. src/router/index.js"></a>7. <code>src/router/index.js</code></h4><p>路由表中路由分成两部分，静态路由与动态路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRoutes = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/login/index&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;dashboard&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/dashboard/index&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Dashboard&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;dashboard&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;dashboard&#x27;</span>, <span class="attr">affix</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>其中 hidden: true 的路由只做路由跳转，不会在左侧导航菜单展示</li></ul><p>动态路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> asyncRoutes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/permission&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/permission/page&#x27;</span>,</span><br><span class="line">    <span class="attr">alwaysShow</span>: <span class="literal">true</span>, <span class="comment">// will always show the root menu</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Permission&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;permission&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;lock&#x27;</span>,</span><br><span class="line">      <span class="attr">roles</span>: [<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;editor&#x27;</span>] <span class="comment">// you can set roles in root nav</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;page&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/permission/page&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;PagePermission&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;pagePermission&#x27;</span>,</span><br><span class="line">          <span class="attr">roles</span>: [<span class="string">&#x27;admin&#x27;</span>] <span class="comment">// or you can only set roles in sub nav</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;directive&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/permission/directive&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;DirectivePermission&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;directivePermission&#x27;</span></span><br><span class="line">          <span class="comment">// if do not set roles, means: this page does not require permission</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;role&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/permission/role&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;RolePermission&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;rolePermission&#x27;</span>,</span><br><span class="line">          <span class="attr">roles</span>: [<span class="string">&#x27;admin&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/icon&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/icons/index&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Icons&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;icons&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon&#x27;</span>, <span class="attr">noCache</span>: <span class="literal">true</span>, <span class="attr">roles</span>: [<span class="string">&#x27;admin&#x27;</span>] &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>动态路由中关联了角色信息，根据用户的角色决定那些路由可用，但这样做的缺点是把角色和路由绑定死了</li></ul><h4 id="8-src-layout-index-vue"><a href="#8-src-layout-index-vue" class="headerlink" title="8. src/layout/index.vue"></a>8. <code>src/layout/index.vue</code></h4><p>它对应的是我们之前介绍的 Container.vue 完成主页布局的，路由路径是 &#x2F;</p><p><img src="D:\2022.js\imgs\image-20220827194047788.png" alt="image-20220827194047788"></p><p>其中又由多部分组成，其中固定不变的是</p><ul><li>侧边栏</li><li>导航栏</li><li>标签栏</li><li>设置</li></ul><p>变化的是中间的 dashboard 部分（AppMain），它由 router-view 配合子路由切换显示</p><ul><li>进入 &#x2F; 后，就会 redirect 重定向到 &#x2F;dashboard 子路由</li><li>进入首页后，会有一个 <code>/api/transaction/list</code> 的后台请求报 404，作为练习，把它补充完整</li></ul><h3 id="第三方登录"><a href="#第三方登录" class="headerlink" title="第三方登录"></a>第三方登录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant a7 as 前端(9527)</span><br><span class="line">participant a8 as 后端(8080)</span><br><span class="line">participant g as gitee</span><br><span class="line"></span><br><span class="line">rect rgba(0,255,0,0.2) </span><br><span class="line">a7 -&gt;&gt; +g: 打开新窗口, 请求 /oauth/authorize</span><br><span class="line">g -&gt;&gt; g: 认证通过</span><br><span class="line">end</span><br><span class="line">rect rgba(255,0,0,0.2)</span><br><span class="line">g -&gt;&gt; -a8: 重定向 redirect uri</span><br><span class="line">end</span><br><span class="line">rect rgba(0,255,0,0.2)</span><br><span class="line">a8 -&gt;&gt; +g: 请求 /oauth/token</span><br><span class="line">g -&gt;&gt; -a8: 返回 access_token(gitee)</span><br><span class="line">end</span><br><span class="line">rect rgba(0,255,0,0.2)</span><br><span class="line">a8 -&gt;&gt; +g: 请求 /api/v5/user</span><br><span class="line">g --&gt;&gt; -a8: </span><br><span class="line">end</span><br><span class="line">a8 -&gt;&gt; 8: 生成 token(8080)</span><br><span class="line">rect rgba(0,0,255,0.2)</span><br><span class="line">a8 -&gt;&gt; +a7: 新窗口将 token(8080) 发送给老窗口(9527)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ol><li><p>9527 打开新窗口，请求 <code>https://gitee.com/oauth/authorize?client_id=$&#123;client_id&#125;&amp;redirect_uri=$&#123;redirect_uri&#125;&amp;response_type=code</code></p></li><li><p>gitee 认证通过，重定向至 8080，并携带 code</p></li><li><p>8080 发送请求 <code>https://gitee.com/oauth/token</code> 携带 client_id、client_secret、code，gitee 返回 access_token 给 8080</p><ul><li><p>这时走的是 https 协议，并且不经过浏览器，能够保证数据传输的安全性</p></li><li><p>重定向到 8080 时，如果被有心人拿到了 code，也没事，因为接下来会把 client_secret 发给 gitee 验证（client_secret 应当只存在 8080），只要 client_secret 不泄露，就可以保证安全</p></li><li><p>如果改成前端拿 code 换 access_token，那就意味着 access_token 得保存在前端，所有保存在前端的都有风险</p></li></ul></li><li><p>8080 可以访问 gitee 的 api 了，拿到用户信息，存入数据库，返回 8080 的 token</p></li><li><p>8080 可以通过 window.opener.postMessage 把 token 给 9527 的老窗口</p><ul><li>这里又会涉及到跨域，不过 9527 与 8080 直接存在信任关系，设置一下就好</li></ul></li><li><p>9527 再走之前的逻辑就可以了，在 router 的 beforeEach 方法里，用 8080 token 换用户信息</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2022/09/17/git/"/>
      <url>/2022/09/17/git/</url>
      
        <content type="html"><![CDATA[<h2 id="设置用户签名"><a href="#设置用户签名" class="headerlink" title="设置用户签名"></a>设置用户签名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 用户名</span><br><span class="line">git config --global user.email 邮箱</span><br></pre></td></tr></table></figure><h2 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init    <span class="comment"># 在当前项目目录中生成.git隐藏文件夹</span></span><br></pre></td></tr></table></figure><h2 id="查看本地库状态"><a href="#查看本地库状态" class="headerlink" title="查看本地库状态"></a>查看本地库状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h2 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名 / .   <span class="comment"># 让git追踪指定的文件</span></span><br><span class="line">git <span class="built_in">rm</span> --cached 文件名      <span class="comment"># 1、删除在暂存区中的文件</span></span><br><span class="line">git restore --staged 文件名 <span class="comment"># 2、删除在暂存区中的文件</span></span><br></pre></td></tr></table></figure><h2 id="提交本地库"><a href="#提交本地库" class="headerlink" title="提交本地库"></a>提交本地库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交信息&quot;</span> 文件名</span><br><span class="line">git commit -m <span class="string">&quot;提交信息&quot;</span> .     <span class="comment"># 提交当前目录下全部文件</span></span><br></pre></td></tr></table></figure><h2 id="查看日志命令"><a href="#查看日志命令" class="headerlink" title="查看日志命令"></a>查看日志命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog  <span class="comment"># 查看简略信息</span></span><br><span class="line">git <span class="built_in">log</span>     <span class="comment"># 查看详细信息   修改人，修改日期，提交信息</span></span><br></pre></td></tr></table></figure><h2 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git可以穿梭到任意历史版本</span></span><br><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>可以理解为一个<mark class="hl-label green">副本</mark> ,每个分支完成不同的工作,最后合并到主分支上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名        <span class="comment"># 创建分支</span></span><br><span class="line">git branch -v           <span class="comment"># 查看分支</span></span><br><span class="line">git checkout 分支名      <span class="comment"># 切换分支</span></span><br><span class="line">git merge 分支名         <span class="comment"># 合并分支</span></span><br></pre></td></tr></table></figure><h4 id="修改默认分支为main"><a href="#修改默认分支为main" class="headerlink" title="修改默认分支为main"></a>修改默认分支为main</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global init.defaultBranch main</span><br></pre></td></tr></table></figure><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v      <span class="comment"># 查看所有远程地址</span></span><br><span class="line">git remote add 别名 远程地址</span><br><span class="line">git push 别名 分支  <span class="comment"># 提交远程库</span></span><br></pre></td></tr></table></figure><h2 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只拉取更新后的代码，更新本地库代码</span></span><br><span class="line">git pull 远程地址 分支</span><br></pre></td></tr></table></figure><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 完整下载远程地址上的代码</span></span><br><span class="line">git <span class="built_in">clone</span> 远程地址</span><br></pre></td></tr></table></figure><h2 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h2><h4 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不是本团队的人员，可以fork别人的代码在自己服务器上，进行修改，然后创建Pull Request请求给源代码负责人审核进行代码合并</span><br></pre></td></tr></table></figure><h4 id="在idea中操作git没有捷径，只有孰能生巧"><a href="#在idea中操作git没有捷径，只有孰能生巧" class="headerlink" title="在idea中操作git没有捷径，只有孰能生巧"></a>在idea中操作git没有捷径，只有孰能生巧</h4>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql基础篇</title>
      <link href="/2022/09/05/mysql/"/>
      <url>/2022/09/05/mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql5-7修改字符集"><a href="#mysql5-7修改字符集" class="headerlink" title="mysql5.7修改字符集"></a>mysql5.7修改字符集</h2><h4 id="查看字符集"><a href="#查看字符集" class="headerlink" title="查看字符集"></a>查看字符集</h4><blockquote><p>show variables like ‘character_%’</p><p>show variables like ‘collation_%’;</p></blockquote><h4 id="修改my-ini文件"><a href="#修改my-ini文件" class="headerlink" title="修改my.ini文件"></a>修改my.ini文件</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8 <span class="comment">#默认字符集</span></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="attr">collation-server</span>=utf8_general_ci</span><br><span class="line"><span class="comment"># 最后重启mysql服务，即可在表中添加中文，8.0版本以上默认字符集为utf8</span></span><br></pre></td></tr></table></figure><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><h4 id="DDL-Data-Definiton-Language数据定义语言"><a href="#DDL-Data-Definiton-Language数据定义语言" class="headerlink" title="DDL(Data Definiton Language数据定义语言)"></a>DDL(Data Definiton Language数据定义语言)</h4><blockquote><p><strong>CREATE      DROP    ALTER     TRUNCATE</strong></p></blockquote><h4 id="DML-Data-Manipulation-Language数据操作语言"><a href="#DML-Data-Manipulation-Language数据操作语言" class="headerlink" title="DML(Data Manipulation Language数据操作语言)"></a>DML(Data Manipulation Language数据操作语言)</h4><blockquote><p><strong>INSERT      DELETE      UPDATE</strong></p></blockquote><h4 id="DCL-Data-Control-Language数据控制语言"><a href="#DCL-Data-Control-Language数据控制语言" class="headerlink" title="DCL(Data Control Language数据控制语言)"></a>DCL(Data Control Language数据控制语言)</h4><blockquote><p>用于定义数据库，表，字段，用户的访问权限和安全级别</p><p>G<strong>RANT      REVOKE      SAVEPOINT</strong></p></blockquote><h4 id="DQL-Data-Query-Language数据查询语言"><a href="#DQL-Data-Query-Language数据查询语言" class="headerlink" title="DQL(Data Query Language数据查询语言)"></a>DQL(Data Query Language数据查询语言)</h4><blockquote><p><strong>SELECT</strong></p></blockquote><h4 id="TCL-Transaction-Control-Language事物控制语言"><a href="#TCL-Transaction-Control-Language事物控制语言" class="headerlink" title="TCL(Transaction Control Language事物控制语言)"></a>TCL(Transaction Control Language事物控制语言)</h4><blockquote><p><strong>COMMIT      CALLBACK</strong></p></blockquote><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#  单行注释(mysql特有)</span><br><span class="line"><span class="comment">-- 单行注释</span></span><br><span class="line"><span class="comment">/* 多行注释 */</span></span><br></pre></td></tr></table></figure><h2 id="常用基本命令"><a href="#常用基本命令" class="headerlink" title="常用基本命令"></a>常用基本命令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;       # 查询所有数据库</span><br><span class="line"><span class="keyword">select</span> database()     # 查询当前数据库</span><br><span class="line">use 数据库名           # 使用数据库</span><br><span class="line"><span class="keyword">describe</span>(<span class="keyword">desc</span>) 表名    # 显示表结构</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名 # 查询建表语句</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名    # 清除表数据，无法恢复</span><br></pre></td></tr></table></figure><h2 id="常用关键字、函数"><a href="#常用关键字、函数" class="headerlink" title="常用关键字、函数"></a>常用关键字、函数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">source 文件路径名        导入<span class="keyword">SQL</span>文件</span><br><span class="line"><span class="keyword">as</span> 别名                 给字段取别名</span><br><span class="line"><span class="keyword">distinct</span>               字段去重</span><br><span class="line"><span class="keyword">union</span>                   拼接两段查询结果</span><br><span class="line"><span class="keyword">null</span>                    空值，既不是<span class="number">0</span>，也不是<span class="string">&#x27;&#x27;</span></span><br><span class="line">ifnull(字段名,替代的值)    空值函数</span><br></pre></td></tr></table></figure><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># <span class="operator">+</span> 加 <span class="operator">-</span> 减 <span class="operator">*</span> 乘 <span class="operator">/</span> 除</span><br></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 正确返回<span class="number">1</span>，错误返回<span class="number">0</span>，其他情况返回<span class="keyword">null</span></span><br><span class="line"># <span class="operator">=</span>  等于  <span class="operator">&lt;=&gt;</span> 安全等于       区别在于<span class="operator">&lt;=&gt;</span>可以判断<span class="keyword">null</span></span><br><span class="line"># <span class="operator">!=</span>  <span class="operator">&lt;&gt;</span>  不等于</span><br><span class="line"># <span class="operator">&gt;</span> 大于 <span class="operator">&gt;=</span> 大于等于</span><br><span class="line"># <span class="operator">&lt;</span> 小于 <span class="operator">&lt;=</span> 小于等于</span><br><span class="line"># <span class="keyword">between</span> 条件<span class="number">1</span> <span class="keyword">and</span> 条件<span class="number">2</span>     包含边界</span><br><span class="line"># <span class="keyword">in</span>(<span class="keyword">set</span>)  <span class="keyword">not</span> <span class="keyword">in</span>()          查找字段中具体的值</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- not(!)      非</span></span><br><span class="line"><span class="comment">-- and(&amp;&amp;)     与</span></span><br><span class="line"><span class="comment">-- or(||)      或</span></span><br><span class="line"><span class="comment">-- xor         异或</span></span><br></pre></td></tr></table></figure><h2 id="排序与分页"><a href="#排序与分页" class="headerlink" title="排序与分页"></a>排序与分页</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 字段名 排序方式   <span class="keyword">asc</span>(ascend)升序    <span class="keyword">desc</span>(descend)降序</span><br><span class="line">limit (pageNo<span class="number">-1</span>)<span class="operator">*</span>pageSize,pageSize    分页</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">not null      非空</span><br><span class="line">unique        唯一</span><br><span class="line">primary key   主键  (not null + unique)</span><br><span class="line">foreign key   外键</span><br></pre></td></tr></table></figure><h2 id="DDL语句"><a href="#DDL语句" class="headerlink" title="DDL语句"></a>DDL语句</h2><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名（</span><br><span class="line">字段1 字段1类型 约束 [COMMENT 字段1注释]，</span><br><span class="line">字段2 字段2类型 约束 [COMMENT 字段2注释]，</span><br><span class="line">字段3 字段3类型 约束 [COMMENT 字段3注释]，</span><br><span class="line">字段4 字段4类型 约束 [COMMENT 字段4注释]，</span><br><span class="line">…….</span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">）[COMMENT 表注释]；</span><br></pre></td></tr></table></figure><h2 id="DML语句"><a href="#DML语句" class="headerlink" title="DML语句"></a>DML语句</h2><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span> (插入的数据), ... ;</span><br></pre></td></tr></table></figure><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段<span class="number">1</span> <span class="operator">=</span> 值 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><mark class="hl-label blue">from</mark>  > <mark class="hl-label default">where</mark> > group by > <mark class="hl-label red">having</mark>  > <mark class="hl-label green">select</mark> > order by > <mark class="hl-label purple">limit</mark> <h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h4 id="自连接-表必须使用别名分隔"><a href="#自连接-表必须使用别名分隔" class="headerlink" title="自连接(表必须使用别名分隔)"></a>自连接(表必须使用别名分隔)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">inner</span> <span class="keyword">join</span> 表<span class="number">1</span> 别名<span class="number">2</span> <span class="keyword">on</span> 连接条件</span><br></pre></td></tr></table></figure><h4 id="内连接-查询两张表的交集部分数据"><a href="#内连接-查询两张表的交集部分数据" class="headerlink" title="内连接(查询两张表的交集部分数据)"></a>内连接(查询两张表的交集部分数据)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 隐式内连接</span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span>，表<span class="number">2</span> <span class="keyword">where</span> 条件</span><br><span class="line"># 显式内连接</span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">2</span> <span class="keyword">inner</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件 </span><br></pre></td></tr></table></figure><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 左外连接,查询左表所有数据以及两表交集</span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件 </span><br><span class="line"># 右外连接,查询右表所有数据以及两表交集</span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h4 id="查看与开启事务方式"><a href="#查看与开启事务方式" class="headerlink" title="查看与开启事务方式"></a>查看与开启事务方式</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@autocommit</span>;               查看事务提交方式</span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@autocommit</span><span class="operator">=</span><span class="number">0</span>;                <span class="number">0</span>为手动提交，<span class="number">1</span>为自动提交</span><br></pre></td></tr></table></figure><h4 id="提交事务（commit"><a href="#提交事务（commit" class="headerlink" title="提交事务（commit)"></a>提交事务（commit)</h4><h4 id="回滚事务（rollback）"><a href="#回滚事务（rollback）" class="headerlink" title="回滚事务（rollback）"></a>回滚事务（rollback）</h4><h4 id="关于并发事务"><a href="#关于并发事务" class="headerlink" title="关于并发事务"></a>关于并发事务</h4><mark class="hl-label blue">脏读</mark> ：一个事务读到另一个事务还未提交的数据<br><mark class="hl-label green">不可重复读</mark> ：一个事务先后读取同一条事务，但两次读到的数据不同<br><mark class="hl-label orange">幻读</mark> ：一个事务按照条件查询数据，没有对应的数据行，但在插入数据时，又发现这行数据已经存在<h4 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h4><mark class="hl-label pink">原子性</mark> (Atomicity):事务是不可分割的最小操作单元，要么全部成功，要么全部失败<br><mark class="hl-label red">一致性</mark> (Consistency):事务完成时，必须使所有的数据都保持一致状态<br><mark class="hl-label orange">隔离性</mark> (Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行<br><mark class="hl-label green">持久性</mark> (Durability):事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。<h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><table><thead><tr><th align="center">隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">Read uncommitted</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td></tr><tr><td align="center">Read committed</td><td align="center">❌</td><td align="center">✔</td><td align="center">✔</td></tr><tr><td align="center">Repeatable Read</td><td align="center">❌</td><td align="center">❌</td><td align="center">✔</td></tr><tr><td align="center">Serializable</td><td align="center">❌</td><td align="center">❌</td><td align="center">❌</td></tr></tbody></table><h4 id="查看事务隔离级别"><a href="#查看事务隔离级别" class="headerlink" title="查看事务隔离级别"></a>查看事务隔离级别</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@transaction</span>_isolation;     # 查看隔离级别</span><br><span class="line"><span class="keyword">set</span> [session<span class="operator">|</span><span class="keyword">global</span>] transaction isolation level  # 隔离级别;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础篇</title>
      <link href="/2022/08/15/java%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2022/08/15/java%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><blockquote><p>目的：随时能够使用Java工具相关的一些命令</p><p>操作：将jdk环境下的bin目录的路径粘贴到环境变量中</p></blockquote><h2 id="JDK和JRE"><a href="#JDK和JRE" class="headerlink" title="JDK和JRE"></a>JDK和JRE</h2><h4 id="jdk包含jre"><a href="#jdk包含jre" class="headerlink" title="jdk包含jre"></a>jdk包含jre</h4><blockquote><p><strong>jdk: java development kit</strong></p><p>jdk包含   JVM   核心类库  开发工具</p></blockquote><blockquote><p><strong>jre: java runtime environment</strong></p><p>java的运行环境，可以运行字节码文件</p></blockquote><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释   /*多行注释*/    /**文档注释*/</span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><strong>变量定义格式</strong></li></ul><blockquote><p>数据类型  变量 &#x3D; 数据值</p></blockquote><ul><li><strong>基本数据类型</strong></li></ul><blockquote><p>byte          字节型        1字节</p><p>short        短整型         2字节</p><p>int             整型             4字节</p><p>long          长整型         8字节       需要加入L标识</p></blockquote><blockquote><p>float          单精度         4字节       需要加入F标识</p><p>double      双精度         8字节</p></blockquote><blockquote><p>boolean    true   false</p></blockquote><blockquote><p>char           字符型        2字节</p></blockquote><ul><li><strong>引用数据类型</strong></li></ul><blockquote><p>数据值是存在其他空间中的，自己空间中存储的是地址值</p><p>String         字符串</p><p>Array           数组</p><p>对象</p></blockquote><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><blockquote><p>由数字，字母，下划线，$符号组成</p><p>不能是数字开头，不能是关键字，区分大小写</p></blockquote><blockquote><p>变量，方法名       小驼峰命名法     firstName</p><p>类名                       大驼峰命名法     HelloWorld</p></blockquote><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><table><thead><tr><th align="center">符号</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td></tr><tr><td align="center">-</td><td align="center">减</td></tr><tr><td align="center">*</td><td align="center">乘</td></tr><tr><td align="center">&#x2F;</td><td align="center">除</td></tr><tr><td align="center">%</td><td align="center">取模，求余</td></tr></tbody></table><p><strong>隐式转换</strong></p><p>范围：<strong>byte &lt; short &lt; int &lt; long &lt; float &lt; double</strong></p><p>取值范围小的数 &#x3D;&#x3D;&#x3D;&gt;  取值范围大的数</p><p><strong>byte，short</strong> <strong>，char</strong>做运算的时候会被提升到<strong>int</strong>类型</p><p><strong>强制转换</strong></p><p>取值范围大的数 &#x3D;&#x3D;&#x3D;&gt; 取值范围小的数</p><p>格式：<strong>目标数据类型  变量名 &#x3D; (目标数据类型) 被强转的数据</strong></p><h4 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先赋值，再自加</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> a++</span><br><span class="line"><span class="comment">//先自加，再赋值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> ++b</span><br><span class="line"><span class="comment">//先赋值，再自减</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> a--</span><br><span class="line"><span class="comment">//先自减，再赋值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> --b</span><br></pre></td></tr></table></figure><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><table><thead><tr><th align="center">符号</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">赋值</td></tr><tr><td align="center">+&#x3D;</td><td align="center">加后赋值</td></tr><tr><td align="center">-&#x3D;</td><td align="center">减后赋值</td></tr><tr><td align="center">*&#x3D;</td><td align="center">乘后赋值</td></tr><tr><td align="center">&#x2F;&#x3D;</td><td align="center">除后赋值</td></tr><tr><td align="center">%&#x3D;</td><td align="center">取余后赋值</td></tr></tbody></table><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p><code>== 等于  != 不等于  &gt; 大于  &gt;= 大于等于  &lt; 小于 &lt;= 小于等于</code></p><blockquote><p>&#x3D;&#x3D;</p><p>基本数据类型中比较值</p><p>引用数据类型比较地址</p></blockquote><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th align="center">符号</th><th align="center">作用</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">与</td><td align="center">左右为真都为真</td></tr><tr><td align="center">|</td><td align="center">或</td><td align="center">有一个为真，则为真</td></tr><tr><td align="center">！</td><td align="center">非</td><td align="center">取反</td></tr><tr><td align="center">^</td><td align="center">异或</td><td align="center">相同为假，不同为真</td></tr><tr><td align="center">&amp;&amp;</td><td align="center">短路与</td><td align="center">已经可以判断结果，后面不执行</td></tr><tr><td align="center">||</td><td align="center">短路或</td><td align="center">已经可以判断结果，后面不执行</td></tr></tbody></table><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><blockquote><p><strong><code>关系表达式 ? 表达式1 : 表达式2 </code></strong></p><p>关系表达式为true，执行表达式1</p><p>关系表达式为false，执行表达式2</p></blockquote><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式<span class="number">1</span>)&#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(关系表达式<span class="number">2</span>)&#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    语句体<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">   <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">      语句<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">      语句<span class="number">2</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">      语句<span class="number">3</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JDK9，默认使用break语句</span></span><br><span class="line"><span class="keyword">switch</span> (表达式)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> -&gt; System.out.println(<span class="string">&quot;锤子&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> -&gt; System.out.println(<span class="string">&quot;镰刀&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化语句;条件判断语句;条件控制语句)&#123;</span><br><span class="line">    循环语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">while</span>(条件判断语句)&#123;</span><br><span class="line">   循环体语句;</span><br><span class="line">   条件判断语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    初始化语句;</span><br><span class="line">    条件控制语句;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断语句);</span><br></pre></td></tr></table></figure><h2 id="continue与break"><a href="#continue与break" class="headerlink" title="continue与break"></a>continue与break</h2><blockquote><p>continue   跳出本次循环，继续下次循环</p><p>break         结束本次循环</p></blockquote><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>完整声明：<code>数据类型[] 数组名 = new 数据类型[]&#123;元素1,元素2...&#125;</code></p><p>简化格式：<code>数据类型[] 数组名 = &#123;元素1,元素2...&#125;</code></p><p>内存地址格式：<code>[I@1b6d3586</code></p><blockquote><p><code>[</code>   表示当前是一个数组</p><p><code>I</code>   表示当前数组的类型是int型</p><p><code>@</code>    间隔符号(固定格式)</p><p><code>1b6d3586</code>   地址值(十六进制)</p></blockquote><p>数组长度属性：<strong>length</strong></p><p>idea快速生成数组的遍历形式： <code>数组名.fori</code></p><p><strong>数组内存图</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/6029/image-20220815131235590.png" alt="image-20220815131235590"></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><blockquote><p>方法是程序中最小的执行单元</p><p>提高代码的复用性和可维护性</p></blockquote><blockquote><p><strong>形参：方法中定义的参数</strong></p><p><strong>实参：方法调用中的参数</strong></p></blockquote><h4 id="权限修饰符："><a href="#权限修饰符：" class="headerlink" title="权限修饰符："></a>权限修饰符：</h4><table><thead><tr><th align="center">修饰符</th><th align="center">同一个类中</th><th align="center">同一个包中其他类</th><th align="center">不同包下的子类</th><th align="center">不同包下的无关类</th></tr></thead><tbody><tr><td align="center">private</td><td align="center">✔</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">友好</td><td align="center">✔</td><td align="center">✔</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">protected</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td><td align="center"></td></tr><tr><td align="center">public</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td></tr></tbody></table><h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><blockquote><p>同一个类中，方法名相同，参数不同的方法，与返回值无关</p><p>参数不同：个数不同、类型不同、顺序不同</p></blockquote><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><blockquote><p>类(class)：    共同特征的描述</p><p>对象(new)： 真实存在的具体实例</p><p>三大特征：   封装、继承、多态</p></blockquote><h4 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h4><h5 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a><strong>成员变量</strong></h5><blockquote><p>类中声明的变量</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//成员方法</span></span><br><span class="line">修饰符 返回值类型 方法名(形参)&#123;</span><br><span class="line">     方法体;</span><br><span class="line">     <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h5><blockquote><p>类中使用static修饰的变量，属于类，不属于对象</p><p>静态方法中只能访问静态变量和静态方法</p><p>非静态方法可以访问所有</p><p>静态方法中无this关键字</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态方法</span></span><br><span class="line">修饰符 <span class="keyword">static</span> 返回值类型 方法名(形参)&#123;</span><br><span class="line">     方法体;</span><br><span class="line">     <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h5><blockquote><p>方法中声明的变量</p></blockquote><h4 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名&#123;</span><br><span class="line">     <span class="comment">//1、成员变量(属性)</span></span><br><span class="line">         <span class="comment">//修饰符 数据类型 变量名;存在默认值</span></span><br><span class="line">         <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//2、成员方法(行为)</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">         <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">             <span class="keyword">return</span> name;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><blockquote><p>本质：所在方法调用者的地址</p><p>可以区别成员变量和局部变量</p><p>类中每个方法都有一个默认参数this</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/6029/image-20220816171705585.png" alt="image-20220816171705585"></p><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><blockquote><p>代表父类存储空间</p><p>访问父类的构造方法，成员变量，成员方法</p></blockquote><h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><blockquote><p>new出来的对象都在堆里开辟空间</p></blockquote><p><code>String name = &quot;小明&quot;</code>                              小明存在于字符串常量池中</p><p><code>String name = new String(&quot;小红&quot;)</code>     小红存在于堆内存中</p><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><blockquote><p>final修饰基本类型，数据值不能变               常量</p><p>final修饰引用类型，数据地址不能变</p></blockquote><h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><blockquote><p>提高字符串的操作效率</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">append()        追加字符串</span><br><span class="line">reverse()       翻转字符串</span><br><span class="line">length()        获取字符串长度</span><br><span class="line">toString()      将StringBuilder对象变成String</span><br></pre></td></tr></table></figure><h4 id="StringJoiner"><a href="#StringJoiner" class="headerlink" title="StringJoiner"></a>StringJoiner</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">StringJoiner</span><span class="params">(间隔符号)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StringJoiner</span><span class="params">(间隔符号，开始符号，结束符号)</span>&#123;&#125;</span><br><span class="line">add(添加内容)</span><br><span class="line">length()   获取长度</span><br><span class="line">toSting()  将StringJoiner对象变成String</span><br></pre></td></tr></table></figure><h4 id="对象内存图"><a href="#对象内存图" class="headerlink" title="对象内存图"></a>对象内存图</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/6029/image-20220816173321060.png" alt="image-20220816173321060"></p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><p><code>public class 子类 extends 父类&#123;&#125;</code></p><blockquote><p>子类可以继承父类中的属性和行为</p><p>子类可以在父类的基础上增加其他功能</p></blockquote><blockquote><p>只能单继承，不能多继承，一个类只能继承一个直接父类</p><p>所有的类都直接或间接继承Object类</p></blockquote><h5 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h5><p><strong>父类中的方法满足不了需求，，需要进行方法重写</strong></p><blockquote><p>重写方法的名称和形参必须与父类中的一样</p><p>访问权限子类必须大于等于父类</p><p>返回值类型子类必须小于等于父类</p></blockquote><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><h5 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h5><blockquote><p>有继承&#x2F;实现关系</p><p>有方法重写</p></blockquote><p><code>Animal a = new Dog();</code></p><blockquote><p>调用成员变量特点：编译看左边，运行看左边</p><p>调用成员方法特点：编译看左边，运行看右边</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/6029/image-20220816200238372.png" alt="image-20220816200238372"></p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><blockquote><p>包就是文件夹，管理不同功能的java类</p><p>书写规则：公司域名反写 + 包的作用，见名知意</p><p>全类名：包名 + 类名</p></blockquote><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><blockquote><p>局部代码块：在方法内部声明,生命周期短         { }</p><p>构造代码块：在类中声明，创建一次对象执行一次，构造方法之前      {}</p><p>静态代码块：加载类的时候执行，只执行一次        static{}</p></blockquote><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p><strong>关键字：abstract</strong></p><blockquote><p>抽象类不能实例化，但可以有构造方法</p><p>具体实现的方法和抽象方法可以同时存在</p><p>子类抽象方法必须实现，或者子类也是抽象方法</p></blockquote><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><strong>关键字：interface,implements</strong></p><blockquote><p>接口不能实例化，和类之间是实现关系</p><p>接口中的方法子类必须全部重写，或者子类是抽象类</p><p>实现类可以同时实现多个接口</p></blockquote><blockquote><p>成员变量默认使用<code>public static final</code> 修饰        只能是常量</p><p>成员方法默认使用public修饰，子类实现方法中访问权限不能低于public</p></blockquote><blockquote><p>JDK8新特性</p><p>接口中可以定义有方法体的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;你好呀世界&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//默认方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">sayGood</span><span class="params">()</span> &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;Good&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>JDK9新特性</p><p>接口中可以定义私有方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sayGoodBye</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是私有方法&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><blockquote><p>应用方面：汽车的发动机，ArrayList中的迭代器</p><p><strong>内部类可以直接访问外部类，外部类需要实例化内部类才能访问</strong></p></blockquote><blockquote><p>在其他类中访问成员内部类：</p><p><code>Outer.Inner in = new Outer().new Inner();</code></p></blockquote><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><blockquote><p>只能访问外部类的静态变量和静态方法，访问非静态需要创建对象</p><p><code>外部类名.内部类名 对象名 = new 外部类名.内部类名()</code></p></blockquote><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><blockquote><p>定义在方法内部</p><p>外界无法直接使用局部内部类，需要在方法中创建对象</p><p>可以直接访问外部类的成员和该方法的局部变量</p></blockquote><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><blockquote><p>隐藏了名字的内部类，底层同时实现了创建子类和对象的过程</p></blockquote><p><code>new 类/接口()&#123;</code></p><p>​       重写方法;</p><p><code>&#125;</code></p><blockquote><p>包含了继承或实现，方法重写，创建对象</p><p>整体就是一个类的子类对象或者接口的实现类对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Inter</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inter</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prefer</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我是匿名内部类&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax + axios</title>
      <link href="/2022/08/15/Ajax/"/>
      <url>/2022/08/15/Ajax/</url>
      
        <content type="html"><![CDATA[<h2 id="原始异步请求四步"><a href="#原始异步请求四步" class="headerlink" title="原始异步请求四步"></a>原始异步请求四步</h2><p><strong>Ajax :   Asynchronous JavaScript and XML</strong></p><blockquote><p>创建异步请求对象   let xhr &#x3D; new XMLHttpRequest();</p><p>readyState&#x3D;0</p></blockquote><blockquote><p>给异步对象绑定事件            xhr.onreadystatechange &#x3D; function(){}</p><p>请求状态码readyState发生改变（除0以外)，该函数执行一次</p></blockquote><blockquote><p>初始化异步请求对象&#x3D;&#x3D;&gt;xhr.open(“请求方式”,”请求路径”,”true”);</p><p>true代表使用异步请求的方式                                       readtState &#x3D; 1</p></blockquote><blockquote><p>发送异步请求&#x3D;&#x3D;》xhr.send();                                       readyState &#x3D; 2</p><p>获取服务器返回的对象              异步请求状态码          readyState &#x3D; 3</p><p>异步请求对象解析服务器返回的数据                            readyState &#x3D; 4</p></blockquote><p>TODO   axios</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium</title>
      <link href="/2022/08/11/selenium/"/>
      <url>/2022/08/11/selenium/</url>
      
        <content type="html"><![CDATA[<h2 id="获取浏览器驱动的两种方法"><a href="#获取浏览器驱动的两种方法" class="headerlink" title="获取浏览器驱动的两种方法"></a>获取浏览器驱动的两种方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment"># 需要配置环境变量，程序自动寻找chrome驱动</span></span><br><span class="line">wd = webdriver.Chrome()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">wd = webdriver.Chrome(service=Service(<span class="string">r&#x27;&quot;F:\software\chromedriver\chromedriver.exe&quot;&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="设置最长寻找时间"><a href="#设置最长寻找时间" class="headerlink" title="设置最长寻找时间"></a>设置最长寻找时间</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 程序每半秒钟查找一次元素，最长十秒钟</span></span><br><span class="line"><span class="comment"># 找不到则抛出异常</span></span><br><span class="line">wd.implicitly_wait(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="comment"># 打开网页</span></span><br><span class="line">wd.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment"># 返回一个元素对象 WebElement</span></span><br><span class="line">baidu = wd.find_element(By.ID, <span class="string">&quot;kw&quot;</span>)</span><br><span class="line">search = wd.find_element(By.ID, <span class="string">&quot;su&quot;</span>)</span><br><span class="line"><span class="comment"># 返回一个元素对象列表</span></span><br><span class="line">wd.find_elements()</span><br><span class="line"><span class="comment"># 绑定搜索框元素，并输入周杰伦</span></span><br><span class="line">baidu.send_keys(<span class="string">&quot;周杰伦&quot;</span>)</span><br><span class="line"><span class="comment"># 获取元素对象的相关属性</span></span><br><span class="line">value = baidu.get_attribute(<span class="string">&quot;class&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="xpath基本语法"><a href="#xpath基本语法" class="headerlink" title="xpath基本语法"></a>xpath基本语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">wd.find_element(By.XPATH, <span class="string">&#x27;xpath语法&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;&#x2F;&#x3D;&#x3D;    代表网页的根,也表示一个元素对象</p><p>&#x3D;&#x3D;[@id&#x3D;’’]&#x3D;&#x3D;代表可以绑定具体属性的元素对象</p><p>&#x3D;&#x3D;&#x2F;&#x2F;&#x3D;&#x3D;   代表任意多个元素</p><p>&#x3D;&#x3D;&#x2F;&#x2F;div[@id&#x3D;’su’]&#x2F;span[2]&#x2F;p&#x3D;&#x3D;表示id属性为su的div元素下的第二个span标签下的p标签</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记</title>
      <link href="/2022/08/08/python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/08/08/python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="python基本语法"><a href="#python基本语法" class="headerlink" title="python基本语法"></a>python基本语法</h2><p>python是一种解释性的脚本语言,解释一行执行一行</p><p>依靠缩进来区分代码块</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>&#x3D;&#x3D;del&#x3D;&#x3D;   在内存中删除变量</p></li><li><p>&#x3D;&#x3D;dir()&#x3D;&#x3D;函数可以查看当前变量可以调用那些函数</p></li><li><p>&#x3D;&#x3D;eval()&#x3D;&#x3D;函数可以将字符串当作函数表达式使用</p></li><li><p>全局变量   ps:  &#x3D;&#x3D;global&#x3D;&#x3D;关键字，在函数内部使用外部变量</p></li><li><p>局部变量</p></li></ul><h3 id="基本数据结构"><a href="#基本数据结构" class="headerlink" title="基本数据结构"></a>基本数据结构</h3><ol><li><p>整型     int</p></li><li><p>浮点型 float</p></li><li><p>布尔型  bool     True    False</p></li><li><blockquote><p>字符型  str         str()     name&#x3D;”你好呀世界”</p><p>&#x3D;&#x3D;name[3]&#x3D;&#x3D;  取出第四个字符</p></blockquote></li><li><blockquote><p>列表      list         数组  []   list()</p><p>extends()  拼接值       +&#x3D; 拼接列表一致</p><p>append()  直接拼接列表对象，而不是值</p></blockquote></li><li><blockquote><p>元组    tuple     ()与列表一致,元素不可改变     tuple()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解构赋值</span></span><br><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">a, b, c = my_tuple</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br></pre></td></tr></table></figure></blockquote></li><li><blockquote><p>字典      dict         键值对     person &#x3D;  {  “name”:   “小明” }</p><p>person[“name”]   取出字典中的元素</p></blockquote></li></ol><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li>and   与     类似   &amp;&amp;</li><li>or      或     类似   |</li><li>not    非      类似  ！</li></ul><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><ul><li>&#x3D;&#x3D;is&#x3D;&#x3D;  &#x3D;&#x3D;is not&#x3D;&#x3D;  判断引用对象是否是同一个</li><li>&#x3D;&#x3D;是判断引用对象的值是否相等</li></ul><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><ul><li><blockquote><p>if  条件:</p><p>  elif 条件:</p><p>  else:</p></blockquote></li><li><p>while  条件:</p></li><li><blockquote><p>for  循环变量  in  条件:</p><p>else: 循环语句中出现break,不执行</p></blockquote></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>函数定义关键字  &#x3D;&#x3D;def&#x3D;&#x3D;</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TODO 一般用来标识自己待做的事情</span></span><br><span class="line"><span class="comment"># python中都是引用传值 id() ==&gt; 查看变量地址</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_hello</span>(<span class="params">num=<span class="number">19</span>, *args, **dicts</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    缺省参数：具有默认值的参数 ==》 num</span></span><br><span class="line"><span class="string">    多值参数：*args接收元组  **kwargs接收字典</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">person = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;阿炳&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print_hello(num=<span class="number">20</span>, <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,**person)</span><br></pre></td></tr></table></figure><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul><li>对象名一般采用大驼峰法</li><li>__ 双下划线代表私有</li><li>&#x3D;&#x3D;mro()&#x3D;&#x3D;方法可以查看方法解析顺序</li><li>&#x3D;&#x3D;装饰器&#x3D;&#x3D;<ol><li>@classmethod   类方法</li><li>@staticmethod   静态方法</li></ol></li><li>面向对象三大特性：</li></ul><ol><li>封装</li><li>继承<ul><li>&#x3D;&#x3D;单继承&#x3D;&#x3D;</li><li>&#x3D;&#x3D;多继承&#x3D;&#x3D;：可以继承多个父类</li><li>私有属性和私有方法不被继承</li></ul></li><li>多态</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>:</span><br><span class="line">    skill = <span class="string">&quot;唱歌&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mother</span>:</span><br><span class="line">    skill = <span class="string">&quot;跳舞&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singer</span>(Father, Mother):</span><br><span class="line">    name = <span class="literal">None</span>  <span class="comment"># 类属性 一个类只有一个</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, salary</span>):</span><br><span class="line">        self.salary = salary  <span class="comment"># 实例属性 每个对象都有</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;构造方法执行&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        设置对象返回的内容,类似于java中的toString()</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好呀世界&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;对象已经被销毁了&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ul><li>&#x3D;&#x3D;raise&#x3D;&#x3D;：   手动抛异常</li><li>&#x3D;&#x3D;except&#x3D;&#x3D;：发生异常时执行</li><li>&#x3D;&#x3D;else&#x3D;&#x3D;：     未发生异常时执行</li><li>&#x3D;&#x3D;finally&#x3D;&#x3D;：  一定会执行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">except</span> 异常类型:</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">finally</span>:</span><br></pre></td></tr></table></figure><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ol><li>&#x3D;&#x3D;import 模块名&#x3D;&#x3D;  as  别名   导入模块中的全部内容</li><li>&#x3D;&#x3D;from ···  import&#x3D;&#x3D;     导入模块中指定内容</li></ol><h3 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h3><h4 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a>两种方式</h4><ol><li>&#96;&#96;&#96;python<br>fp &#x3D; open(“文件名”, “操作文件权限”, encoding&#x3D;”编码格式”)<br>fp.read()        # 读取文件内容<br>fp.write(“内容”)  # 向文件写内容<br>fp.close()       # 关闭流<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```python</span><br><span class="line">   with open(&quot;文件名&quot;, &quot;操作文件权限&quot;, encoding=&quot;编码格式&quot;) as fp:</span><br><span class="line">       fp.read()  # 读取文件内容</span><br><span class="line">       fp.write(&quot;内容&quot;)  # 向文件写内容</span><br><span class="line">       fp.close()  # 关闭流</span><br></pre></td></tr></table></figure></li></ol><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">操作文件  一个函数三个方法   <span class="built_in">open</span> read write close   <span class="built_in">open</span>未找到文件自动创建一个</span><br><span class="line">    <span class="string">&#x27;r&#x27;</span>     <span class="built_in">open</span> <span class="keyword">for</span> reading (default)</span><br><span class="line">    <span class="string">&#x27;w&#x27;</span>     <span class="built_in">open</span> <span class="keyword">for</span> writing, truncating the file first</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span>     create a new file <span class="keyword">and</span> <span class="built_in">open</span> it <span class="keyword">for</span> writing</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>     <span class="built_in">open</span> <span class="keyword">for</span> writing, appending to the end of the file <span class="keyword">if</span> it exists</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>     binary mode</span><br><span class="line">    <span class="string">&#x27;t&#x27;</span>     text mode (default)</span><br><span class="line">    <span class="string">&#x27;+&#x27;</span>     <span class="built_in">open</span> a disk file <span class="keyword">for</span> updating (reading <span class="keyword">and</span> writing)</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span>     universal newline mode (deprecated)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫</title>
      <link href="/2022/08/08/spider/"/>
      <url>/2022/08/08/spider/</url>
      
        <content type="html"><![CDATA[<h2 id="scrapy-爬虫框架"><a href="#scrapy-爬虫框架" class="headerlink" title="scrapy-爬虫框架"></a>scrapy-爬虫框架</h2><blockquote><p>scrapy  startproject   工程名</p><p>cd 工程名  尽量符合命名标准，不使用数字开头</p><p>scrapy genspider 爬虫文件的名字  需要爬取的网址</p><p>scrapy crawl 爬虫文件的名字   name     crawl &#x3D;&gt; 爬</p></blockquote><h3 id="requests请求库"><a href="#requests请求库" class="headerlink" title="requests请求库"></a>requests请求库</h3><h2 id="查看各大网站中的君子协议"><a href="#查看各大网站中的君子协议" class="headerlink" title="查看各大网站中的君子协议"></a>查看各大网站中的君子协议</h2><blockquote><p><a href="https://www.baidu.com/robots.txt">https://www.baidu.com/robots.txt</a></p></blockquote><h2 id="爬虫模板"><a href="#爬虫模板" class="headerlink" title="爬虫模板"></a>爬虫模板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaiduSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;Baidu&#x27;</span>  <span class="comment"># 爬虫的名字 用于运行爬虫使用的值</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;www.baidu.com&#x27;</span>]  <span class="comment"># 允许访问的域名</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.baidu.com/&#x27;</span>]  <span class="comment"># 起始的访问地址</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        在start_urls之后自动执行的方法</span></span><br><span class="line"><span class="string">        :param response: response = requests.get()</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你好呀世界&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#response的属性和方法</span></span><br><span class="line">    <span class="comment">#response.text  获取响应的字符串</span></span><br><span class="line">    <span class="comment">#response.body  获取的是二进制数据</span></span><br><span class="line">    <span class="comment">#response.xpath() 通过xpath解析自己想要的内容</span></span><br><span class="line">    <span class="comment">#response.extract() 提取selector对象中的data属性  extract =》 取出</span></span><br><span class="line">    <span class="comment">#response.extract_first() 提取selector列表中的第一个数据</span></span><br></pre></td></tr></table></figure><h2 id="scrapy框架工程结构"><a href="#scrapy框架工程结构" class="headerlink" title="scrapy框架工程结构"></a>scrapy框架工程结构</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">工程名</span><br><span class="line">  工程名</span><br><span class="line">    spiders文件夹    存放爬虫文件的地方，核心功能文件</span><br><span class="line">    <span class="built_in">_</span><span class="built_in">_</span>init<span class="built_in">_</span><span class="built_in">_</span>.py</span><br><span class="line">    items.py        定义返回数据结构</span><br><span class="line">    middlewares.py  中间件  代理</span><br><span class="line">    pipelines.py    管道，处理下载的数据</span><br><span class="line">    settings.py     配置设置  robots协议 ua定义</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> spider </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
