<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python基本语法</title>
      <link href="/2022/08/08/python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/08/08/python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="python基本语法"><a href="#python基本语法" class="headerlink" title="python基本语法"></a>python基本语法</h2><p>python是一种解释性的脚本语言,解释一行执行一行</p><p>依靠缩进来区分代码块</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>&#x3D;&#x3D;del&#x3D;&#x3D;   在内存中删除变量</p></li><li><p>&#x3D;&#x3D;dir()&#x3D;&#x3D;函数可以查看当前变量可以调用那些函数</p></li><li><p>&#x3D;&#x3D;eval()&#x3D;&#x3D;函数可以将字符串当作函数表达式使用</p></li><li><p>全局变量   ps:  &#x3D;&#x3D;global&#x3D;&#x3D;关键字，在函数内部使用外部变量</p></li><li><p>局部变量</p></li></ul><h3 id="基本数据结构"><a href="#基本数据结构" class="headerlink" title="基本数据结构"></a>基本数据结构</h3><ol><li><p>整型     int</p></li><li><p>浮点型 float</p></li><li><p>布尔型  bool     True    False</p></li><li><blockquote><p>字符型  str         str()     name&#x3D;”你好呀世界”</p><p>&#x3D;&#x3D;name[3]&#x3D;&#x3D;  取出第四个字符</p></blockquote></li><li><blockquote><p>列表      list         数组  []   list()</p><p>extends()  拼接值       +&#x3D; 拼接列表一致</p><p>append()  直接拼接列表对象，而不是值</p></blockquote></li><li><blockquote><p>元组    tuple     ()与列表一致,元素不可改变     tuple()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解构赋值</span></span><br><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">a, b, c = my_tuple</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br></pre></td></tr></table></figure></blockquote></li><li><blockquote><p>字典      dict         键值对     person &#x3D;  {  “name”:   “小明” }</p><p>person[“name”]   取出字典中的元素</p></blockquote></li></ol><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li>and   与     类似   &amp;&amp;</li><li>or      或     类似   |</li><li>not    非      类似  ！</li></ul><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><ul><li>&#x3D;&#x3D;is&#x3D;&#x3D;  &#x3D;&#x3D;is not&#x3D;&#x3D;  判断引用对象是否是同一个</li><li>&#x3D;&#x3D;是判断引用对象的值是否相等</li></ul><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><ul><li><blockquote><p>if  条件:</p><p>  elif 条件:</p><p>  else:</p></blockquote></li><li><p>while  条件:</p></li><li><blockquote><p>for  循环变量  in  条件:</p><p>else: 循环语句中出现break,不执行</p></blockquote></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>函数定义关键字  &#x3D;&#x3D;def&#x3D;&#x3D;</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TODO 一般用来标识自己待做的事情</span></span><br><span class="line"><span class="comment"># python中都是引用传值 id() ==&gt; 查看变量地址</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_hello</span>(<span class="params">num=<span class="number">19</span>, *args, **dicts</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    缺省参数：具有默认值的参数 ==》 num</span></span><br><span class="line"><span class="string">    多值参数：*args接收元组  **kwargs接收字典</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">person = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;阿炳&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print_hello(num=<span class="number">20</span>, <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,**person)</span><br></pre></td></tr></table></figure><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul><li>对象名一般采用大驼峰法</li><li>__ 双下划线代表私有</li><li>&#x3D;&#x3D;mro()&#x3D;&#x3D;方法可以查看方法解析顺序</li><li>&#x3D;&#x3D;装饰器&#x3D;&#x3D;<ol><li>@classmethod   类方法</li><li>@staticmethod   静态方法</li></ol></li><li>面向对象三大特性：</li></ul><ol><li>封装</li><li>继承<ul><li>&#x3D;&#x3D;单继承&#x3D;&#x3D;</li><li>&#x3D;&#x3D;多继承&#x3D;&#x3D;：可以继承多个父类</li><li>私有属性和私有方法不被继承</li></ul></li><li>多态</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>:</span><br><span class="line">    skill = <span class="string">&quot;唱歌&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mother</span>:</span><br><span class="line">    skill = <span class="string">&quot;跳舞&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singer</span>(Father, Mother):</span><br><span class="line">    name = <span class="literal">None</span>  <span class="comment"># 类属性 一个类只有一个</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, salary</span>):</span><br><span class="line">        self.salary = salary  <span class="comment"># 实例属性 每个对象都有</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;构造方法执行&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        设置对象返回的内容,类似于java中的toString()</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好呀世界&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;对象已经被销毁了&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ul><li>&#x3D;&#x3D;raise&#x3D;&#x3D;：   手动抛异常</li><li>&#x3D;&#x3D;except&#x3D;&#x3D;：发生异常时执行</li><li>&#x3D;&#x3D;else&#x3D;&#x3D;：     未发生异常时执行</li><li>&#x3D;&#x3D;finally&#x3D;&#x3D;：  一定会执行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">except</span> 异常类型:</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">finally</span>:</span><br></pre></td></tr></table></figure><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ol><li>&#x3D;&#x3D;import 模块名&#x3D;&#x3D;  as  别名   导入模块中的全部内容</li><li>&#x3D;&#x3D;from ···  import&#x3D;&#x3D;     导入模块中指定内容</li></ol><h3 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h3><h4 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a>两种方式</h4><ol><li>&#96;&#96;&#96;python<br>fp &#x3D; open(“文件名”, “操作文件权限”, encoding&#x3D;”编码格式”)<br>fp.read()        # 读取文件内容<br>fp.write(“内容”)  # 向文件写内容<br>fp.close()       # 关闭流<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```python</span><br><span class="line">   with open(&quot;文件名&quot;, &quot;操作文件权限&quot;, encoding=&quot;编码格式&quot;) as fp:</span><br><span class="line">       fp.read()  # 读取文件内容</span><br><span class="line">       fp.write(&quot;内容&quot;)  # 向文件写内容</span><br><span class="line">       fp.close()  # 关闭流</span><br></pre></td></tr></table></figure></li></ol><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">操作文件  一个函数三个方法   <span class="built_in">open</span> read write close   <span class="built_in">open</span>未找到文件自动创建一个</span><br><span class="line">    <span class="string">&#x27;r&#x27;</span>     <span class="built_in">open</span> <span class="keyword">for</span> reading (default)</span><br><span class="line">    <span class="string">&#x27;w&#x27;</span>     <span class="built_in">open</span> <span class="keyword">for</span> writing, truncating the file first</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span>     create a new file <span class="keyword">and</span> <span class="built_in">open</span> it <span class="keyword">for</span> writing</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>     <span class="built_in">open</span> <span class="keyword">for</span> writing, appending to the end of the file <span class="keyword">if</span> it exists</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>     binary mode</span><br><span class="line">    <span class="string">&#x27;t&#x27;</span>     text mode (default)</span><br><span class="line">    <span class="string">&#x27;+&#x27;</span>     <span class="built_in">open</span> a disk file <span class="keyword">for</span> updating (reading <span class="keyword">and</span> writing)</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span>     universal newline mode (deprecated)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>爬虫</title>
      <link href="/2022/08/08/spider/"/>
      <url>/2022/08/08/spider/</url>
      
        <content type="html"><![CDATA[<h2 id="scrapy-爬虫框架"><a href="#scrapy-爬虫框架" class="headerlink" title="scrapy-爬虫框架"></a>scrapy-爬虫框架</h2><blockquote><p>scrapy  startproject   工程名</p><p>cd 工程名  尽量符合命名标准，不使用数字开头</p><p>scrapy genspider 爬虫文件的名字  需要爬取的网址</p><p>scrapy crawl 爬虫文件的名字   name     crawl &#x3D;&gt; 爬</p></blockquote><h3 id="requests请求库"><a href="#requests请求库" class="headerlink" title="requests请求库"></a>requests请求库</h3><h2 id="查看各大网站中的君子协议"><a href="#查看各大网站中的君子协议" class="headerlink" title="查看各大网站中的君子协议"></a>查看各大网站中的君子协议</h2><blockquote><p><a href="https://www.baidu.com/robots.txt">https://www.baidu.com/robots.txt</a></p></blockquote><h2 id="爬虫模板"><a href="#爬虫模板" class="headerlink" title="爬虫模板"></a>爬虫模板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaiduSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;Baidu&#x27;</span>  <span class="comment"># 爬虫的名字 用于运行爬虫使用的值</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;www.baidu.com&#x27;</span>]  <span class="comment"># 允许访问的域名</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.baidu.com/&#x27;</span>]  <span class="comment"># 起始的访问地址</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        在start_urls之后自动执行的方法</span></span><br><span class="line"><span class="string">        :param response: response = requests.get()</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你好呀世界&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#response的属性和方法</span></span><br><span class="line">    <span class="comment">#response.text  获取响应的字符串</span></span><br><span class="line">    <span class="comment">#response.body  获取的是二进制数据</span></span><br><span class="line">    <span class="comment">#response.xpath() 通过xpath解析自己想要的内容</span></span><br><span class="line">    <span class="comment">#response.extract() 提取selector对象中的data属性  extract =》 取出</span></span><br><span class="line">    <span class="comment">#response.extract_first() 提取selector列表中的第一个数据</span></span><br></pre></td></tr></table></figure><h2 id="scrapy框架工程结构"><a href="#scrapy框架工程结构" class="headerlink" title="scrapy框架工程结构"></a>scrapy框架工程结构</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">工程名</span><br><span class="line">  工程名</span><br><span class="line">    spiders文件夹    存放爬虫文件的地方，核心功能文件</span><br><span class="line">    <span class="built_in">_</span><span class="built_in">_</span>init<span class="built_in">_</span><span class="built_in">_</span>.py</span><br><span class="line">    items.py        定义返回数据结构</span><br><span class="line">    middlewares.py  中间件  代理</span><br><span class="line">    pipelines.py    管道，处理下载的数据</span><br><span class="line">    settings.py     配置设置  robots协议 ua定义</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
