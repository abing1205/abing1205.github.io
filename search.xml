<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>简单实现邮件发送</title>
      <link href="/2022/11/29/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
      <url>/2022/11/29/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</url>
      
        <content type="html"><![CDATA[<h3 id="一、引入依赖"><a href="#一、引入依赖" class="headerlink" title="一、引入依赖"></a>一、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、邮件配置"><a href="#二、邮件配置" class="headerlink" title="二、邮件配置"></a>二、邮件配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">default-encoding:</span> <span class="string">UTF-8</span>     <span class="comment"># 默认编码模式</span></span><br><span class="line">    <span class="attr">from:</span> <span class="number">750321038</span><span class="string">@qq.com</span>      <span class="comment"># 邮件发送者</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span>           <span class="comment"># 邮件服务地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="number">750321038</span><span class="string">@qq.com</span>  <span class="comment"># 发送者邮箱</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">oazpcfyenyerbchc</span>  <span class="comment"># 授权码</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">timeout:</span> <span class="number">25000</span></span><br><span class="line">          <span class="attr">auth:</span> <span class="literal">true</span></span><br><span class="line"> <span class="comment"># 如果是用 SSL方式，需要配置如下属性,使用qq邮箱的话需要开启</span></span><br><span class="line">          <span class="attr">starttls:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">required:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="三、发送邮件类"><a href="#三、发送邮件类" class="headerlink" title="三、发送邮件类"></a>三、发送邮件类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br></pre></td></tr></table></figure><h3 id="四、发送普通邮件"><a href="#四、发送普通邮件" class="headerlink" title="四、发送普通邮件"></a>四、发送普通邮件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送普通邮件</span></span><br><span class="line"><span class="comment"> * Async注解表示支持异步请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/sendSimpleEmail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sendSimpleEmail</span><span class="params">(String to)</span> &#123;</span><br><span class="line">    <span class="type">SimpleMailMessage</span> <span class="variable">simpleMailMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">    <span class="comment">//simpleMailMessage.setFrom(MailConstant.from);</span></span><br><span class="line">    simpleMailMessage.setTo(to);</span><br><span class="line">    simpleMailMessage.setSubject(<span class="string">&quot;测试邮件&quot;</span>);</span><br><span class="line">    <span class="comment">//支持解析html标签</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;&lt;h1 style=&#x27;color:red&#x27;&gt;哈哈哈&lt;/h1&gt;&quot;</span>;</span><br><span class="line">    <span class="comment">//使用工具类发送一个验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">captcha</span> <span class="operator">=</span> VerifyCodeGenerator.getCaptcha();</span><br><span class="line">    simpleMailMessage.setText(content+<span class="string">&quot;I LOVE YOU FOREVER&quot;</span> + captcha);</span><br><span class="line">    javaMailSender.send(simpleMailMessage);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;发送成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、发送普通文本-附件"><a href="#五、发送普通文本-附件" class="headerlink" title="五、发送普通文本 + 附件"></a>五、发送普通文本 + 附件</h3><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送普通文本内容 ＋ 附件(文件)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/sendMimeMessage&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMimeMessage</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">    <span class="comment">//媒体类型（通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型 ）是一种标准，用来表示文档、文件或字节流的性质和格式。</span></span><br><span class="line">    <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> javaMailSender.createMimeMessage();;</span><br><span class="line">    <span class="comment">// true表示需要创建一个multipart message</span></span><br><span class="line">    <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(message, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//helper.setFrom(MailConstant.from);  配置文件中配置或者代码中配置</span></span><br><span class="line">    helper.setTo(<span class="string">&quot;2944025930@qq.com&quot;</span>);</span><br><span class="line">    helper.setSubject(<span class="string">&quot;测试MimeMessage&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;小熊已经发送附件了&quot;</span>;</span><br><span class="line">    helper.setText(content, <span class="literal">true</span>);</span><br><span class="line">    javaMailSender.send(message);</span><br><span class="line">    <span class="comment">//发送附件(文件，图片)</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\小熊2003\\Pictures\\Camera Roll\\hello.jpg&quot;</span>;</span><br><span class="line">    <span class="type">FileSystemResource</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getFilename();</span><br><span class="line">    <span class="keyword">assert</span> fileName != <span class="literal">null</span>;</span><br><span class="line">    helper.addAttachment(fileName, file);</span><br><span class="line">    javaMailSender.send(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2</title>
      <link href="/2022/10/08/vue2/"/>
      <url>/2022/10/08/vue2/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-基础"><a href="#Vue-基础" class="headerlink" title="Vue 基础"></a>Vue 基础</h2><h4 id="使用代理服务器解决跨域"><a href="#使用代理服务器解决跨域" class="headerlink" title="使用代理服务器解决跨域"></a>使用代理服务器解决跨域</h4><p>为了避免前后端服务器联调时， fetch、xhr 请求产生跨域问题，需要配置代理</p><ul><li>打开 vue.config.js 添加</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8001</span>,<span class="comment">//默认端口是8000</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├─assets</span><br><span class="line">├─components</span><br><span class="line">├─router</span><br><span class="line">├─store</span><br><span class="line">├─api</span><br><span class="line">├─utils</span><br><span class="line">└─views</span><br></pre></td></tr></table></figure><ul><li><p>assets - 静态资源</p></li><li><p>components - 可复用组件</p></li><li><p>router - 路由</p></li><li><p>store - 数据共享</p></li><li><p>api - 后台交互</p></li><li><p>utils - 第三方工具库</p></li><li><p>views - 路由组件</p></li></ul><h4 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h4><ul><li><code>&#123;&#123;&#125;&#125;</code> 里只能绑定一个属性</li><li>template 内只能有一个根元素</li><li>插值内可以进行简单的表达式计算</li></ul><h4 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h4><ul><li>v-bind&#x3D;””</li></ul><ul><li>简写方式( : )：可以省略 v-bind 只保留冒号</li></ul><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><ul><li>简写方式：可以把 v-on: 替换为 @</li></ul><h4 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h4><ul><li>用 v-model 实现双向绑定，即<ul><li>javascript 数据可以同步到表单标签</li><li>反过来用户在表单标签输入的新值也会同步到 javascript 这边</li></ul></li><li>双向绑定只适用于表单这种带【输入】功能的标签</li><li>复选框这种标签，双向绑定的 javascript 数据类型一般用数组</li></ul><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><ul><li>computed</li></ul><ul><li>计算属性使用时就把它当属性来用，不加 ()，有缓存功能：<ul><li>一次计算后，会将结果缓存，下次再计算时，只要数据没有变化，不会重新计算，直接返回缓存结果</li></ul></li></ul><h4 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h4><ul><li>watch，监听data配置项中的数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">  <span class="attr">username</span>:&#123;</span><br><span class="line">    immediate：<span class="literal">true</span><span class="comment">//立即触发</span></span><br><span class="line">    deep：<span class="literal">true</span><span class="comment">//深度监听</span></span><br><span class="line">    <span class="title function_">handler</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="comment">//回调函数</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4><ul><li>v-for&#x3D;”(item,index) in items”</li></ul><ul><li>v-if 和 v-for 不能用于同一个标签</li><li>v-for 需要配合特殊的标签属性 key 一起使用，并且 key 属性要绑定到一个能起到唯一标识作用的数据上</li></ul><h2 id="2-Vue-进阶"><a href="#2-Vue-进阶" class="headerlink" title="2. Vue 进阶"></a>2. Vue 进阶</h2><h3 id="2-1-数据代理"><a href="#2-1-数据代理" class="headerlink" title="2.1 数据代理"></a>2.1 数据代理</h3><ul><li>通过一个对象代理到另一个对象的属性的操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(p,<span class="string">&quot;name&quot;</span>,&#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>通过object.defineProperty()方法把data配置项中对象的属性添加到vm上，为每个添加到vm上的属性都指定一个getter&#x2F;setter，在getter&#x2F;setter内部去操作data中的对应属性。</li></ul><h3 id="2-2-Vue-Router"><a href="#2-2-Vue-Router" class="headerlink" title="2.2 Vue-Router"></a>2.2 Vue-Router</h3><p>vue 属于单页面应用，所谓的路由，就是根据浏览器路径不同，用不同的<strong>视图组件</strong>替换这个页面内容展示</p><h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><p>新建一个路由 js 文件，例如 src&#x2F;router&#x2F;index.js，内容如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span><span class="string">&#x27;@/views/Home.vue&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">      <span class="attr">children</span>:[&#123;<span class="attr">path</span>:<span class="string">&quot;about&quot;</span>,<span class="attr">component</span>:组件名&#125;,&#123;...&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>最重要的就是建立了【路径】与【视图组件】之间的映射关系</li><li>接下来在main.js中引入路由表进行注册即可</li></ul><p>在 main.js 中采用我们的路由 js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span><span class="comment">//默认寻找index.js文件</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router：router,<span class="comment">//可以简写成router</span></span><br><span class="line">        <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(app)<span class="comment">//生成对应的元素</span></span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)<span class="comment">//把元素渲染到id为app的元素中</span></span><br></pre></td></tr></table></figure><ul><li>其中 <code>&lt;router-view&gt;</code> 起到占位作用，改变路径后，这个路径对应的视图组件就会占据 <code>&lt;router-view&gt;</code> 的位置，替换掉它之前的内容</li></ul><p>子路由变化，切换的是【ContainerView 组件】中 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 部分的内容</p><ul><li>redirect 可以用来重定向（跳转）到一个新的地址</li><li>path 的取值为 * 表示匹配不到其它 path 时，就会匹配它</li></ul><h4 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h4><h5 id="标签式"><a href="#标签式" class="headerlink" title="标签式"></a>标签式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/about&quot;&gt;关于&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h5 id="编程式路由"><a href="#编程式路由" class="headerlink" title="编程式路由"></a>编程式路由</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">  methods : &#123;</span><br><span class="line">    gotoAbout() &#123;</span><br><span class="line">      this.$router.push(&#123;</span><br><span class="line">        path:&quot;/home/about&quot;,</span><br><span class="line">        query:&#123;//传递参数</span><br><span class="line">          id:1001,</span><br><span class="line">          name:&quot;哈哈&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>其中 this.$router 是拿到路由对象</li><li>this.$route对象中存储的是关于路由对象的信息</li><li>push 方法根据 url 进行跳转</li></ul><h5 id="重置路由"><a href="#重置路由" class="headerlink" title="重置路由"></a>重置路由</h5><p>在用户注销时应当重置路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resetRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  router.<span class="property">matcher</span> = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123; routes &#125;).<span class="property">matcher</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-Vuex"><a href="#2-3-Vuex" class="headerlink" title="2.3 Vuex"></a>2.3 Vuex</h3><h4 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h4><p>vuex 可以在多个组件之间共享数据，并且共享的数据是【响应式】的，即数据的变更能及时渲染到模板</p><ul><li>与之对比 localStorage 与 sessionStorage 也能共享数据，但缺点是数据并非【响应式】</li></ul><p>首先需要定义 state 与 mutations 他们一个用来读取共享数据，一个用来修改共享数据</p><p>src&#x2F;store&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="keyword">const</span> actions = &#123;<span class="comment">//响应组件中的动作</span></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">context,value</span>)&#123;<span class="comment">//context代表mini版的$store</span></span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&quot;ADD&quot;</span>,value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;<span class="comment">//对数据进行加工，操作state中的数据</span></span><br><span class="line">  <span class="title function_">ADD</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">  ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getters = &#123;<span class="comment">//将state中的数据进行加工后再使用</span></span><br><span class="line">  <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">sum</span>*<span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">  state,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>mutations 方法不能直接调用，只能通过 <code>this.$store.commit(mutation方法名, 参数)</code> 来间接调用</li><li>可以跳过actions环节</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;action名称&#x27;</span>, 参数)</span><br></pre></td></tr></table></figure><h4 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h4><p>每次去写 <code>$store.state.name</code> 这样的代码显得非常繁琐，可以用 vuex 帮我们生成计算属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState &#125; from &#x27;vuex&#x27;</span><br><span class="line">export default&#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState([&#x27;name&#x27;, &#x27;age&#x27;])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>mapState 返回的是一个对象，对象内包含了 name() 和 age() 的这两个方法作为计算属性</li><li>此对象配合 <code>...</code> 展开运算符，填充入 computed 即可使用</li></ul><h4 id="mapMutations"><a href="#mapMutations" class="headerlink" title="mapMutations"></a>mapMutations</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;mapMutations&#125; from &#x27;vuex&#x27;</span><br><span class="line">export default&#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations([&#x27;updateName&#x27;])</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name:&#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>类似的，调用 mutation 修改共享数据也可以简化</li><li>mapMutations 返回的对象中包含的方法，就会调用 store.commit() 来执行 mutation 方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2022/09/17/git/"/>
      <url>/2022/09/17/git/</url>
      
        <content type="html"><![CDATA[<h2 id="设置用户签名"><a href="#设置用户签名" class="headerlink" title="设置用户签名"></a>设置用户签名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 用户名</span><br><span class="line">git config --global user.email 邮箱</span><br></pre></td></tr></table></figure><h2 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init    <span class="comment"># 在当前项目目录中生成.git隐藏文件夹</span></span><br></pre></td></tr></table></figure><h2 id="查看本地库状态"><a href="#查看本地库状态" class="headerlink" title="查看本地库状态"></a>查看本地库状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h2 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名 / .   <span class="comment"># 让git追踪指定的文件</span></span><br><span class="line">git <span class="built_in">rm</span> --cached 文件名      <span class="comment"># 1、删除在暂存区中的文件</span></span><br><span class="line">git restore --staged 文件名 <span class="comment"># 2、删除在暂存区中的文件</span></span><br></pre></td></tr></table></figure><h2 id="提交本地库"><a href="#提交本地库" class="headerlink" title="提交本地库"></a>提交本地库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交信息&quot;</span> 文件名</span><br><span class="line">git commit -m <span class="string">&quot;提交信息&quot;</span> .     <span class="comment"># 提交当前目录下全部文件</span></span><br></pre></td></tr></table></figure><h2 id="查看日志命令"><a href="#查看日志命令" class="headerlink" title="查看日志命令"></a>查看日志命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog  <span class="comment"># 查看简略信息</span></span><br><span class="line">git <span class="built_in">log</span>     <span class="comment"># 查看详细信息   修改人，修改日期，提交信息</span></span><br></pre></td></tr></table></figure><h2 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git可以穿梭到任意历史版本</span></span><br><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>可以理解为一个<mark class="hl-label green">副本</mark> ,每个分支完成不同的工作,最后合并到主分支上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名        <span class="comment"># 创建分支</span></span><br><span class="line">git branch -v           <span class="comment"># 查看分支</span></span><br><span class="line">git checkout 分支名      <span class="comment"># 切换分支</span></span><br><span class="line">git merge 分支名         <span class="comment"># 合并分支</span></span><br></pre></td></tr></table></figure><h4 id="修改默认分支为main"><a href="#修改默认分支为main" class="headerlink" title="修改默认分支为main"></a>修改默认分支为main</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global init.defaultBranch main</span><br></pre></td></tr></table></figure><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v      <span class="comment"># 查看所有远程地址</span></span><br><span class="line">git remote add 别名 远程地址</span><br><span class="line">git push 别名 分支  <span class="comment"># 提交远程库</span></span><br></pre></td></tr></table></figure><h2 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只拉取更新后的代码，更新本地库代码</span></span><br><span class="line">git pull 远程地址 分支</span><br></pre></td></tr></table></figure><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 完整下载远程地址上的代码</span></span><br><span class="line">git <span class="built_in">clone</span> 远程地址</span><br></pre></td></tr></table></figure><h2 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h2><h4 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不是本团队的人员，可以fork别人的代码在自己服务器上，进行修改，然后创建Pull Request请求给源代码负责人审核进行代码合并</span><br></pre></td></tr></table></figure><h4 id="在idea中操作git没有捷径，只有孰能生巧"><a href="#在idea中操作git没有捷径，只有孰能生巧" class="headerlink" title="在idea中操作git没有捷径，只有孰能生巧"></a>在idea中操作git没有捷径，只有孰能生巧</h4>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql基础篇</title>
      <link href="/2022/09/05/mysql/"/>
      <url>/2022/09/05/mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql5-7修改字符集"><a href="#mysql5-7修改字符集" class="headerlink" title="mysql5.7修改字符集"></a>mysql5.7修改字符集</h2><h4 id="查看字符集"><a href="#查看字符集" class="headerlink" title="查看字符集"></a>查看字符集</h4><blockquote><p>show variables like ‘character_%’</p><p>show variables like ‘collation_%’;</p></blockquote><h4 id="修改my-ini文件"><a href="#修改my-ini文件" class="headerlink" title="修改my.ini文件"></a>修改my.ini文件</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8 <span class="comment">#默认字符集</span></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="attr">collation-server</span>=utf8_general_ci</span><br><span class="line"><span class="comment"># 最后重启mysql服务，即可在表中添加中文，8.0版本以上默认字符集为utf8</span></span><br></pre></td></tr></table></figure><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><h4 id="DDL-Data-Definiton-Language数据定义语言"><a href="#DDL-Data-Definiton-Language数据定义语言" class="headerlink" title="DDL(Data Definiton Language数据定义语言)"></a>DDL(Data Definiton Language数据定义语言)</h4><blockquote><p><strong>CREATE      DROP    ALTER     TRUNCATE</strong></p></blockquote><h4 id="DML-Data-Manipulation-Language数据操作语言"><a href="#DML-Data-Manipulation-Language数据操作语言" class="headerlink" title="DML(Data Manipulation Language数据操作语言)"></a>DML(Data Manipulation Language数据操作语言)</h4><blockquote><p><strong>INSERT      DELETE      UPDATE</strong></p></blockquote><h4 id="DCL-Data-Control-Language数据控制语言"><a href="#DCL-Data-Control-Language数据控制语言" class="headerlink" title="DCL(Data Control Language数据控制语言)"></a>DCL(Data Control Language数据控制语言)</h4><blockquote><p>用于定义数据库，表，字段，用户的访问权限和安全级别</p><p>G<strong>RANT      REVOKE      SAVEPOINT</strong></p></blockquote><h4 id="DQL-Data-Query-Language数据查询语言"><a href="#DQL-Data-Query-Language数据查询语言" class="headerlink" title="DQL(Data Query Language数据查询语言)"></a>DQL(Data Query Language数据查询语言)</h4><blockquote><p><strong>SELECT</strong></p></blockquote><h4 id="TCL-Transaction-Control-Language事物控制语言"><a href="#TCL-Transaction-Control-Language事物控制语言" class="headerlink" title="TCL(Transaction Control Language事物控制语言)"></a>TCL(Transaction Control Language事物控制语言)</h4><blockquote><p><strong>COMMIT      CALLBACK</strong></p></blockquote><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#  单行注释(mysql特有)</span><br><span class="line"><span class="comment">-- 单行注释</span></span><br><span class="line"><span class="comment">/* 多行注释 */</span></span><br></pre></td></tr></table></figure><h2 id="常用基本命令"><a href="#常用基本命令" class="headerlink" title="常用基本命令"></a>常用基本命令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;       # 查询所有数据库</span><br><span class="line"><span class="keyword">select</span> database()     # 查询当前数据库</span><br><span class="line">use 数据库名           # 使用数据库</span><br><span class="line"><span class="keyword">describe</span>(<span class="keyword">desc</span>) 表名    # 显示表结构</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名 # 查询建表语句</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名    # 清除表数据，无法恢复</span><br></pre></td></tr></table></figure><h2 id="常用关键字、函数"><a href="#常用关键字、函数" class="headerlink" title="常用关键字、函数"></a>常用关键字、函数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">source 文件路径名        导入<span class="keyword">SQL</span>文件</span><br><span class="line"><span class="keyword">as</span> 别名                 给字段取别名</span><br><span class="line"><span class="keyword">distinct</span>               字段去重</span><br><span class="line"><span class="keyword">union</span>                   拼接两段查询结果</span><br><span class="line"><span class="keyword">null</span>                    空值，既不是<span class="number">0</span>，也不是<span class="string">&#x27;&#x27;</span></span><br><span class="line">ifnull(字段名,替代的值)    空值函数</span><br></pre></td></tr></table></figure><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># <span class="operator">+</span> 加 <span class="operator">-</span> 减 <span class="operator">*</span> 乘 <span class="operator">/</span> 除</span><br></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 正确返回<span class="number">1</span>，错误返回<span class="number">0</span>，其他情况返回<span class="keyword">null</span></span><br><span class="line"># <span class="operator">=</span>  等于  <span class="operator">&lt;=&gt;</span> 安全等于       区别在于<span class="operator">&lt;=&gt;</span>可以判断<span class="keyword">null</span></span><br><span class="line"># <span class="operator">!=</span>  <span class="operator">&lt;&gt;</span>  不等于</span><br><span class="line"># <span class="operator">&gt;</span> 大于 <span class="operator">&gt;=</span> 大于等于</span><br><span class="line"># <span class="operator">&lt;</span> 小于 <span class="operator">&lt;=</span> 小于等于</span><br><span class="line"># <span class="keyword">between</span> 条件<span class="number">1</span> <span class="keyword">and</span> 条件<span class="number">2</span>     包含边界</span><br><span class="line"># <span class="keyword">in</span>(<span class="keyword">set</span>)  <span class="keyword">not</span> <span class="keyword">in</span>()          查找字段中具体的值</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- not(!)      非</span></span><br><span class="line"><span class="comment">-- and(&amp;&amp;)     与</span></span><br><span class="line"><span class="comment">-- or(||)      或</span></span><br><span class="line"><span class="comment">-- xor         异或</span></span><br></pre></td></tr></table></figure><h2 id="排序与分页"><a href="#排序与分页" class="headerlink" title="排序与分页"></a>排序与分页</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 字段名 排序方式   <span class="keyword">asc</span>(ascend)升序    <span class="keyword">desc</span>(descend)降序</span><br><span class="line">limit (pageNo<span class="number">-1</span>)<span class="operator">*</span>pageSize,pageSize    分页</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">not null      非空</span><br><span class="line">unique        唯一</span><br><span class="line">primary key   主键  (not null + unique)</span><br><span class="line">foreign key   外键</span><br></pre></td></tr></table></figure><h2 id="DDL语句"><a href="#DDL语句" class="headerlink" title="DDL语句"></a>DDL语句</h2><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名（</span><br><span class="line">字段1 字段1类型 约束 [COMMENT 字段1注释]，</span><br><span class="line">字段2 字段2类型 约束 [COMMENT 字段2注释]，</span><br><span class="line">字段3 字段3类型 约束 [COMMENT 字段3注释]，</span><br><span class="line">字段4 字段4类型 约束 [COMMENT 字段4注释]，</span><br><span class="line">…….</span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">）[COMMENT 表注释]；</span><br></pre></td></tr></table></figure><h2 id="DML语句"><a href="#DML语句" class="headerlink" title="DML语句"></a>DML语句</h2><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span> (插入的数据), ... ;</span><br></pre></td></tr></table></figure><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段<span class="number">1</span> <span class="operator">=</span> 值 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><mark class="hl-label blue">from</mark>  > <mark class="hl-label default">where</mark> > group by > <mark class="hl-label red">having</mark>  > <mark class="hl-label green">select</mark> > order by > <mark class="hl-label purple">limit</mark> <h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h4 id="自连接-表必须使用别名分隔"><a href="#自连接-表必须使用别名分隔" class="headerlink" title="自连接(表必须使用别名分隔)"></a>自连接(表必须使用别名分隔)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">inner</span> <span class="keyword">join</span> 表<span class="number">1</span> 别名<span class="number">2</span> <span class="keyword">on</span> 连接条件</span><br></pre></td></tr></table></figure><h4 id="内连接-查询两张表的交集部分数据"><a href="#内连接-查询两张表的交集部分数据" class="headerlink" title="内连接(查询两张表的交集部分数据)"></a>内连接(查询两张表的交集部分数据)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 隐式内连接</span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span>，表<span class="number">2</span> <span class="keyword">where</span> 条件</span><br><span class="line"># 显式内连接</span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">2</span> <span class="keyword">inner</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件 </span><br></pre></td></tr></table></figure><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 左外连接,查询左表所有数据以及两表交集</span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件 </span><br><span class="line"># 右外连接,查询右表所有数据以及两表交集</span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h4 id="查看与开启事务方式"><a href="#查看与开启事务方式" class="headerlink" title="查看与开启事务方式"></a>查看与开启事务方式</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@autocommit</span>;               查看事务提交方式</span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@autocommit</span><span class="operator">=</span><span class="number">0</span>;                <span class="number">0</span>为手动提交，<span class="number">1</span>为自动提交</span><br></pre></td></tr></table></figure><h4 id="提交事务（commit"><a href="#提交事务（commit" class="headerlink" title="提交事务（commit)"></a>提交事务（commit)</h4><h4 id="回滚事务（rollback）"><a href="#回滚事务（rollback）" class="headerlink" title="回滚事务（rollback）"></a>回滚事务（rollback）</h4><h4 id="关于并发事务"><a href="#关于并发事务" class="headerlink" title="关于并发事务"></a>关于并发事务</h4><mark class="hl-label blue">脏读</mark> ：一个事务读到另一个事务还未提交的数据<br><mark class="hl-label green">不可重复读</mark> ：一个事务先后读取同一条事务，但两次读到的数据不同<br><mark class="hl-label orange">幻读</mark> ：一个事务按照条件查询数据，没有对应的数据行，但在插入数据时，又发现这行数据已经存在<h4 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h4><mark class="hl-label pink">原子性</mark> (Atomicity):事务是不可分割的最小操作单元，要么全部成功，要么全部失败<br><mark class="hl-label red">一致性</mark> (Consistency):事务完成时，必须使所有的数据都保持一致状态<br><mark class="hl-label orange">隔离性</mark> (Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行<br><mark class="hl-label green">持久性</mark> (Durability):事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。<h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><table><thead><tr><th align="center">隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">Read uncommitted</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td></tr><tr><td align="center">Read committed</td><td align="center">❌</td><td align="center">✔</td><td align="center">✔</td></tr><tr><td align="center">Repeatable Read</td><td align="center">❌</td><td align="center">❌</td><td align="center">✔</td></tr><tr><td align="center">Serializable</td><td align="center">❌</td><td align="center">❌</td><td align="center">❌</td></tr></tbody></table><h4 id="查看事务隔离级别"><a href="#查看事务隔离级别" class="headerlink" title="查看事务隔离级别"></a>查看事务隔离级别</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@transaction</span>_isolation;     # 查看隔离级别</span><br><span class="line"><span class="keyword">set</span> [session<span class="operator">|</span><span class="keyword">global</span>] transaction isolation level  # 隔离级别;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础篇</title>
      <link href="/2022/08/15/java%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2022/08/15/java%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><ul><li><p>目的：随时能够使用Java工具相关的一些命令</p></li><li><p>操作：将jdk环境下的bin目录的路径粘贴到环境变量中</p></li></ul><h2 id="JDK和JRE"><a href="#JDK和JRE" class="headerlink" title="JDK和JRE"></a>JDK和JRE</h2><h3 id="jdk包含jre"><a href="#jdk包含jre" class="headerlink" title="jdk包含jre"></a>jdk包含jre</h3><ul><li><p><strong>jdk: java development kit</strong></p><p>jdk包含   JVM   核心类库  开发工具</p></li><li><p><strong>jre: java runtime environment</strong></p><p>java的运行环境，可以运行字节码文件</p></li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释   /*多行注释*/    /**文档注释*/</span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p><strong>变量定义格式</strong></p><p>数据类型  变量 &#x3D; 数据值</p></li><li><p><strong>基本数据类型</strong></p><ul><li>byte          字节型        1字节</li><li>short        短整型         2字节</li><li>int             整型             4字节</li><li>long          长整型         8字节       需要加入L标识</li><li>float          单精度         4字节       需要加入F标识</li><li>double      双精度         8字节</li><li>boolean     布尔值        true       false</li><li>char           字符型        2字节</li></ul></li><li><p><strong>引用数据类型</strong></p><ul><li>数据值是存在其他空间中的，自己空间中存储的是地址值</li></ul></li></ul><p>​              String          字符串</p><p>​              Array           数组</p><p>​              Object         对象</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li>由数字，字母，下划线，$符号组成</li><li>不能是数字开头，不能是关键字，区分大小写</li><li>变量，方法名       小驼峰命名法     firstName</li><li>类名                       大驼峰命名法     HelloWorld</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><table><thead><tr><th align="center">符号</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td></tr><tr><td align="center">-</td><td align="center">减</td></tr><tr><td align="center">*</td><td align="center">乘</td></tr><tr><td align="center">&#x2F;</td><td align="center">除</td></tr><tr><td align="center">%</td><td align="center">取模，求余</td></tr></tbody></table><p><strong>隐式转换</strong></p><p>范围：<strong>byte &lt; short &lt; int &lt; long &lt; float &lt; double</strong></p><p>取值范围小的数 &#x3D;&#x3D;&#x3D;&gt;  取值范围大的数</p><p><strong>byte，short</strong> <strong>，char</strong>做运算的时候会被提升到<strong>int</strong>类型</p><p><strong>强制转换</strong></p><p>取值范围大的数 &#x3D;&#x3D;&#x3D;&gt; 取值范围小的数</p><p>格式：<strong>目标数据类型  变量名 &#x3D; (目标数据类型) 被强转的数据</strong></p><h4 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先赋值，再自加</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> a++</span><br><span class="line"><span class="comment">//先自加，再赋值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> ++b</span><br><span class="line"><span class="comment">//先赋值，再自减</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> a--</span><br><span class="line"><span class="comment">//先自减，再赋值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> --b</span><br></pre></td></tr></table></figure><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><table><thead><tr><th align="center">符号</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">赋值</td></tr><tr><td align="center">+&#x3D;</td><td align="center">加后赋值</td></tr><tr><td align="center">-&#x3D;</td><td align="center">减后赋值</td></tr><tr><td align="center">*&#x3D;</td><td align="center">乘后赋值</td></tr><tr><td align="center">&#x2F;&#x3D;</td><td align="center">除后赋值</td></tr><tr><td align="center">%&#x3D;</td><td align="center">取余后赋值</td></tr></tbody></table><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p><code>== 等于  != 不等于  &gt; 大于  &gt;= 大于等于  &lt; 小于 &lt;= 小于等于</code></p><ul><li>&#x3D;&#x3D;<ul><li>基本数据类型中比较值</li><li>引用数据类型比较地址</li></ul></li></ul><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th align="center">符号</th><th align="center">作用</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">与</td><td align="center">左右为真都为真</td></tr><tr><td align="center">|</td><td align="center">或</td><td align="center">有一个为真，则为真</td></tr><tr><td align="center">！</td><td align="center">非</td><td align="center">取反</td></tr><tr><td align="center">^</td><td align="center">异或</td><td align="center">相同为假，不同为真</td></tr><tr><td align="center">&amp;&amp;</td><td align="center">短路与</td><td align="center">已经可以判断结果，后面不执行</td></tr><tr><td align="center">||</td><td align="center">短路或</td><td align="center">已经可以判断结果，后面不执行</td></tr></tbody></table><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><blockquote><p><strong><code>关系表达式 ? 表达式1 : 表达式2 </code></strong></p><p>关系表达式为true，执行表达式1</p><p>关系表达式为false，执行表达式2</p></blockquote><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式<span class="number">1</span>)&#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(关系表达式<span class="number">2</span>)&#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    语句体<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">   <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">      语句<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">      语句<span class="number">2</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">      语句<span class="number">3</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JDK9，默认使用break语句</span></span><br><span class="line"><span class="keyword">switch</span> (表达式)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> -&gt; System.out.println(<span class="string">&quot;锤子&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> -&gt; System.out.println(<span class="string">&quot;镰刀&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="keyword">for</span>(初始化语句;条件判断语句;条件控制语句)&#123;</span><br><span class="line">    循环语句;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2</span>、<span class="keyword">for</span>(item in items)&#123;</span><br><span class="line">    <span class="comment">//item是items中的每一项</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">while</span>(条件判断语句)&#123;</span><br><span class="line">   循环体语句;</span><br><span class="line">   条件判断语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    初始化语句;</span><br><span class="line">    条件控制语句;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断语句);</span><br></pre></td></tr></table></figure><h2 id="continue与break"><a href="#continue与break" class="headerlink" title="continue与break"></a>continue与break</h2><blockquote><p>continue   跳出本次循环，继续下次循环</p><p>break         结束本次循环</p></blockquote><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>完整声明：<code>数据类型[] 数组名 = new 数据类型[]&#123;元素1,元素2...&#125;</code></p><p>简化格式：<code>数据类型[] 数组名 = &#123;元素1,元素2...&#125;</code></p><p>内存地址格式：<code>[I@1b6d3586</code></p><ul><li><code>[</code>   表示当前是一个数组</li><li><code>I</code>   表示当前数组的类型是int型</li><li><code>@</code>    间隔符号(固定格式)</li><li><code>1b6d3586</code>   地址值(十六进制)</li></ul><p>数组长度属性：<strong>length</strong></p><p>idea快速生成数组的遍历形式： <code>数组名.fori</code></p><p><strong>数组内存图</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/6029/image-20220815131235590.png" alt="image-20220815131235590"></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><blockquote><p>方法是程序中最小的执行单元</p><p>提高代码的复用性和可维护性</p></blockquote><blockquote><p><strong>形参：方法中定义的参数</strong></p><p><strong>实参：方法调用中的参数</strong></p></blockquote><h4 id="权限修饰符："><a href="#权限修饰符：" class="headerlink" title="权限修饰符："></a>权限修饰符：</h4><table><thead><tr><th align="center">修饰符</th><th align="center">同一个类中</th><th align="center">同一个包中其他类</th><th align="center">不同包下的子类</th><th align="center">不同包下的无关类</th></tr></thead><tbody><tr><td align="center">private</td><td align="center">✔</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">友好</td><td align="center">✔</td><td align="center">✔</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">protected</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td><td align="center"></td></tr><tr><td align="center">public</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td></tr></tbody></table><h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><ul><li><p>同一个类中，方法名相同，参数不同的方法，与返回值无关</p></li><li><p>参数不同：个数不同、类型不同、顺序不同</p></li></ul><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>类(class)：    共同特征的描述</li><li>对象(new)： 真实存在的具体实例</li><li>三大特征：   封装、继承、多态</li></ul><h4 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h4><h5 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a><strong>成员变量</strong></h5><ul><li>类中声明的变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//成员方法</span></span><br><span class="line">修饰符 返回值类型 方法名(形参)&#123;</span><br><span class="line">     方法体;</span><br><span class="line">     <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h5><ul><li>类中使用static修饰的变量，属于类，不属于对象</li><li>静态方法中只能访问静态变量和静态方法</li><li>非静态方法可以访问所有</li><li>静态方法中无this关键字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态方法</span></span><br><span class="line">修饰符 <span class="keyword">static</span> 返回值类型 方法名(形参)&#123;</span><br><span class="line">     方法体;</span><br><span class="line">     <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h5><ul><li>方法中声明的变量</li></ul><h4 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名&#123;</span><br><span class="line">     <span class="comment">//1、成员变量(属性)</span></span><br><span class="line">         <span class="comment">//修饰符 数据类型 变量名;存在默认值</span></span><br><span class="line">         <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//2、成员方法(行为)</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">         <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">             <span class="keyword">return</span> name;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><ul><li>本质：所在方法调用者的地址</li><li>可以区别成员变量和局部变量</li><li>类中每个方法都有一个默认参数this</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/6029/image-20220816171705585.png" alt="image-20220816171705585"></p><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><blockquote><p>代表父类存储空间</p><p>访问父类的构造方法，成员变量，成员方法</p></blockquote><h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><blockquote><p>new出来的对象都在堆里开辟空间</p></blockquote><p><code>String name = &quot;小明&quot;</code>                              小明存在于字符串常量池中</p><p><code>String name = new String(&quot;小红&quot;)</code>     小红存在于堆内存中</p><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><blockquote><p>final修饰基本类型，数据值不能变               常量</p><p>final修饰引用类型，数据地址不能变</p></blockquote><h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><blockquote><p>提高字符串的操作效率</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">append()        追加字符串</span><br><span class="line">reverse()       翻转字符串</span><br><span class="line">length()        获取字符串长度</span><br><span class="line">toString()      将StringBuilder对象变成String</span><br></pre></td></tr></table></figure><h4 id="StringJoiner"><a href="#StringJoiner" class="headerlink" title="StringJoiner"></a>StringJoiner</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">StringJoiner</span><span class="params">(间隔符号)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StringJoiner</span><span class="params">(间隔符号，开始符号，结束符号)</span>&#123;&#125;</span><br><span class="line">add(添加内容)</span><br><span class="line">length()   获取长度</span><br><span class="line">toSting()  将StringJoiner对象变成String</span><br></pre></td></tr></table></figure><h4 id="对象内存图"><a href="#对象内存图" class="headerlink" title="对象内存图"></a>对象内存图</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/6029/image-20220816173321060.png" alt="image-20220816173321060"></p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><p><code>public class 子类 extends 父类&#123;&#125;</code></p><ul><li>子类可以继承父类中的属性和行为</li><li>子类可以在父类的基础上增加其他功能</li><li>只能单继承，不能多继承，一个类只能继承一个直接父类</li><li>所有的类都直接或间接继承Object类</li></ul><h5 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h5><p><strong>父类中的方法满足不了需求，，需要进行方法重写</strong></p><blockquote><p>重写方法的名称和形参必须与父类中的一样</p><p>访问权限子类必须大于等于父类</p><p>返回值类型子类必须小于等于父类</p></blockquote><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><h5 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h5><blockquote><p>有继承&#x2F;实现关系</p><p>有方法重写</p></blockquote><p><code>Animal a = new Dog();</code></p><blockquote><p>调用成员变量特点：编译看左边，运行看左边</p><p>调用成员方法特点：编译看左边，运行看右边</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/6029/image-20220816200238372.png" alt="image-20220816200238372"></p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ul><li>包就是文件夹，管理不同功能的java类</li><li>书写规则：公司域名反写 + 包的作用，见名知意</li><li>全类名：包名 + 类名</li></ul><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><ul><li>局部代码块：在方法内部声明,生命周期短         { }</li><li>构造代码块：在类中声明，创建一次对象执行一次，构造方法之前      {}</li><li>静态代码块：加载类的时候执行，只执行一次        static{}</li></ul><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p><strong>关键字：abstract</strong></p><blockquote><p>抽象类不能实例化，但可以有构造方法</p><p>具体实现的方法和抽象方法可以同时存在</p><p>子类抽象方法必须实现，或者子类也是抽象方法</p></blockquote><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="关键字：interface-implements"><a href="#关键字：interface-implements" class="headerlink" title="关键字：interface,implements"></a>关键字：interface,implements</h3><blockquote><p>接口不能实例化，和类之间是实现关系</p><p>接口中的方法子类必须全部重写，或者子类是抽象类</p><p>实现类可以同时实现多个接口</p></blockquote><ul><li>成员变量默认使用<code>public static final</code> 修饰        只能是常量</li><li>成员方法默认使用public修饰，子类实现方法中访问权限不能低于public</li></ul><h3 id="JDK8新特性"><a href="#JDK8新特性" class="headerlink" title="JDK8新特性"></a>JDK8新特性</h3><p>接口中可以定义有方法体的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;你好呀世界&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//默认方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">sayGood</span><span class="params">()</span> &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;Good&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="JDK9新特性"><a href="#JDK9新特性" class="headerlink" title="JDK9新特性"></a>JDK9新特性</h3><ul><li>接口中可以定义私有方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sayGoodBye</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是私有方法&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><ul><li><p>应用方面：汽车的发动机，ArrayList中的迭代器</p><p><strong>内部类可以直接访问外部类，外部类需要实例化内部类才能访问</strong></p></li><li><p>在其他类中访问成员内部类：</p><p><code>Outer.Inner in = new Outer().new Inner();</code></p></li></ul><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><ul><li><p>只能访问外部类的静态变量和静态方法，访问非静态需要创建对象</p><p><code>外部类名.内部类名 对象名 = new 外部类名.内部类名()</code></p></li></ul><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><ul><li>定义在方法内部</li><li>外界无法直接使用局部内部类，需要在方法中创建对象</li><li>可以直接访问外部类的成员和该方法的局部变量</li></ul><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><ul><li>隐藏了名字的内部类，底层同时实现了创建子类和对象的过程</li></ul><p><code>new 类/接口()&#123;</code></p><p>​       重写方法;</p><p><code>&#125;</code></p><ul><li>包含了继承或实现，方法重写，创建对象</li><li>整体就是一个类的子类对象或者接口的实现类对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Inter</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inter</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prefer</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我是匿名内部类&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><h2 id="BigInteger-大整数类"><a href="#BigInteger-大整数类" class="headerlink" title="BigInteger(大整数类)"></a>BigInteger(大整数类)</h2><h4 id="获取大整数的两种方法"><a href="#获取大整数的两种方法" class="headerlink" title="获取大整数的两种方法"></a>获取大整数的两种方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;10&quot;</span>);</span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">b2</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">2L</span>);</span><br></pre></td></tr></table></figure><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add()               <span class="comment">//加</span></span><br><span class="line">subtract()          <span class="comment">//减</span></span><br><span class="line">multiply()          <span class="comment">//乘</span></span><br><span class="line">divide()            <span class="comment">//除</span></span><br><span class="line">pow()               <span class="comment">//求幂</span></span><br><span class="line">divideAndRemainder()<span class="comment">//返回一个数组，arr[0]商，arr[1]余数</span></span><br><span class="line">abs()               <span class="comment">//求绝对值</span></span><br></pre></td></tr></table></figure><h2 id="BigDecimal-大浮点数"><a href="#BigDecimal-大浮点数" class="headerlink" title="BigDecimal(大浮点数)"></a>BigDecimal(大浮点数)</h2><h4 id="获取大整数的两种方法-1"><a href="#获取大整数的两种方法-1" class="headerlink" title="获取大整数的两种方法"></a>获取大整数的两种方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;2.2&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">d2</span> <span class="operator">=</span> BigDecimal.valueOf(<span class="number">1.1</span>);</span><br></pre></td></tr></table></figure><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//都可以对精度进行设置，对象不可变</span></span><br><span class="line">add()               <span class="comment">//加</span></span><br><span class="line">subtract()          <span class="comment">//减</span></span><br><span class="line">multiply()          <span class="comment">//乘</span></span><br><span class="line">divide()            <span class="comment">//除</span></span><br><span class="line">pow()               <span class="comment">//求幂</span></span><br><span class="line">divideAndRemainder()<span class="comment">//返回一个数组，arr[0]商，arr[1]余数</span></span><br><span class="line">abs()               <span class="comment">//求绝对值</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax + axios</title>
      <link href="/2022/08/15/Ajax/"/>
      <url>/2022/08/15/Ajax/</url>
      
        <content type="html"><![CDATA[<h2 id="原始异步请求四步"><a href="#原始异步请求四步" class="headerlink" title="原始异步请求四步"></a>原始异步请求四步</h2><h3 id="Ajax-Asynchronous-JavaScript-and-XML"><a href="#Ajax-Asynchronous-JavaScript-and-XML" class="headerlink" title="Ajax :   Asynchronous JavaScript and XML"></a><strong>Ajax :   Asynchronous JavaScript and XML</strong></h3><ol><li><p>创建异步请求对象   let xhr &#x3D; new XMLHttpRequest();</p><p>readyState&#x3D;0</p></li><li><p>给异步对象绑定事件</p><p>xhr.onreadystatechange &#x3D; function(){}</p><p>请求状态码readyState发生改变（除0以外)，该函数执行一次</p></li><li><p>初始化异步请求对象&#x3D;&#x3D;&gt;xhr.open(“请求方式”,”请求路径”,”true”);</p><p>true代表使用异步请求的方式</p><p>readtState &#x3D; 1</p></li><li><p>发送异步请求&#x3D;&#x3D;》xhr.send();                                       readyState &#x3D; 2</p><p>获取服务器返回的对象              异步请求状态码          readyState &#x3D; 3</p><p>异步请求对象解析服务器返回的数据                            readyState &#x3D; 4</p></li></ol><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>axios 底层使用了 XMLHttpRequest方式发送请求和接收响应，xhr 相对于之前讲过的 fetch ，功能更强大，但由于是比较老的 api，不支持 Promise，axios 对 xhr 进行了封装，使之支持&lt;% label Promise orange%&gt; ，并提供了对请求、响应的统一拦截功能</p><ul><li>axios 默认导出一个对象，这里的 import 导入的就是它默认导出的对象</li><li>axios既是一个对象又是一个函数</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><table><thead><tr><th>请求</th><th>备注</th></tr></thead><tbody><tr><td>axios.get(url[, config])</td><td>:star:</td></tr><tr><td>axios.delete(url[, config])</td><td></td></tr><tr><td>axios.post(url[, data[, config]])</td><td>:star:</td></tr><tr><td>axios.put(url[, data[, config]])</td><td></td></tr><tr><td>axios.create(config)      &#x2F;&#x2F;创建一个自定义的axios对象</td><td></td></tr></tbody></table><ul><li>config - 选项对象、例如查询参数、请求头…</li><li>get传参config中的属性为params</li><li>data - 请求体数据、最常见的是 json 格式数据</li><li>get请求无法携带请求体，这应当是浏览器的限制所致（xhr、fetch api 均有限制）</li><li>delete 请求可以通过 config 中的 data 携带请求体</li></ul><h4 id="常见的-config-项"><a href="#常见的-config-项" class="headerlink" title="常见的 config 项"></a>常见的 config 项</h4><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>baseURL</td><td>将自动加在 url 前面</td></tr><tr><td>headers</td><td>请求头，类型为简单对象</td></tr><tr><td>params</td><td>跟在 URL 后的请求参数，类型为简单对象或 URLSearchParams</td></tr><tr><td>data</td><td>请求体，类型有简单对象、FormData、URLSearchParams、File 等</td></tr><tr><td>withCredentials</td><td>跨域时是否携带 Cookie 等凭证，默认为 false</td></tr><tr><td>responseType</td><td>响应类型，默认为 json</td></tr></tbody></table><h4 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h4><p>脚手架配置代理服务器后，不需要设置baseURL，否则请求不会走代理，会直接向服务器发送请求产生跨域，&lt;% label 亲测 red %&gt;</p><ul><li>生产环境希望 xhr 请求不走代理，可以用 baseURL 统一修改</li><li>希望跨域请求携带 cookie，需要配置 withCredentials: true，服务器也要配置 allowCredentials &#x3D; true，否则浏览器获取跨域返回的 cookie 时会报错</li></ul><p>响应格式</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>data</td><td>响应体数据 :star:</td></tr><tr><td>status</td><td>状态码 :star:</td></tr><tr><td>headers</td><td>响应头</td></tr></tbody></table><ul><li>200 表示响应成功</li><li>400 请求数据不正确</li><li>401 身份验证没通过</li><li>403 没有权限</li><li>404 资源不存在</li><li>405 不支持请求方式 post</li><li>500 服务器内部错误</li></ul><p>请求拦截器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 一般统一添加请求头信息</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>响应拦截器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 响应成功回调</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 响应失败回调</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium</title>
      <link href="/2022/08/11/selenium/"/>
      <url>/2022/08/11/selenium/</url>
      
        <content type="html"><![CDATA[<h2 id="获取浏览器驱动的两种方法"><a href="#获取浏览器驱动的两种方法" class="headerlink" title="获取浏览器驱动的两种方法"></a>获取浏览器驱动的两种方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment"># 需要配置环境变量，程序自动寻找chrome驱动</span></span><br><span class="line">wd = webdriver.Chrome()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">wd = webdriver.Chrome(service=Service(<span class="string">r&#x27;&quot;F:\software\chromedriver\chromedriver.exe&quot;&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="设置最长寻找时间"><a href="#设置最长寻找时间" class="headerlink" title="设置最长寻找时间"></a>设置最长寻找时间</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 程序每半秒钟查找一次元素，最长十秒钟</span></span><br><span class="line"><span class="comment"># 找不到则抛出异常</span></span><br><span class="line">wd.implicitly_wait(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="comment"># 打开网页</span></span><br><span class="line">wd.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment"># 返回一个元素对象 WebElement</span></span><br><span class="line">baidu = wd.find_element(By.ID, <span class="string">&quot;kw&quot;</span>)</span><br><span class="line">search = wd.find_element(By.ID, <span class="string">&quot;su&quot;</span>)</span><br><span class="line"><span class="comment"># 返回一个元素对象列表</span></span><br><span class="line">wd.find_elements()</span><br><span class="line"><span class="comment"># 绑定搜索框元素，并输入周杰伦</span></span><br><span class="line">baidu.send_keys(<span class="string">&quot;周杰伦&quot;</span>)</span><br><span class="line"><span class="comment"># 获取元素对象的相关属性</span></span><br><span class="line">value = baidu.get_attribute(<span class="string">&quot;class&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="xpath基本语法"><a href="#xpath基本语法" class="headerlink" title="xpath基本语法"></a>xpath基本语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">wd.find_element(By.XPATH, <span class="string">&#x27;xpath语法&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;&#x2F;&#x3D;&#x3D;    代表网页的根,也表示一个元素对象</p><p>&#x3D;&#x3D;[@id&#x3D;’’]&#x3D;&#x3D;代表可以绑定具体属性的元素对象</p><p>&#x3D;&#x3D;&#x2F;&#x2F;&#x3D;&#x3D;   代表任意多个元素</p><p>&#x3D;&#x3D;&#x2F;&#x2F;div[@id&#x3D;’su’]&#x2F;span[2]&#x2F;p&#x3D;&#x3D;表示id属性为su的div元素下的第二个span标签下的p标签</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础篇</title>
      <link href="/2022/08/08/python%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2022/08/08/python%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="python基本语法"><a href="#python基本语法" class="headerlink" title="python基本语法"></a>python基本语法</h2><p>python是一种解释性的脚本语言,解释一行执行一行</p><p>依靠缩进来区分代码块</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>&lt;% label del red%&gt;在内存中删除变量</li><li>&lt;% label dir()函数 green%&gt;可以查看当前变量可以调用那些函数</li><li>&lt;% label eval()函数 orange%&gt;可以将字符串当作函数表达式使用</li><li>全局变量   ps:  &lt;% label global pink%&gt;关键字，在函数内部使用外部变量</li><li>局部变量    定义在函数内部中的变量</li><li>&lt;% label &#x2F;&#x2F; green%&gt; 运算符代表整除    &lt;% label ** green%&gt;代表幂运算</li></ul><h3 id="基本数据结构"><a href="#基本数据结构" class="headerlink" title="基本数据结构"></a>基本数据结构</h3><ol><li><p>整型     int</p></li><li><p>浮点型 float</p></li><li><p>布尔型  bool     True    False</p></li><li><p>字符型  str        name&#x3D;”你好呀世界”</p><p>str()转化为字符串函数</p><p>name[3]  取出第四个字符</p></li><li><p>列表   list   list()   数组  []</p><p>extends()  拼接值       +&#x3D; 拼接列表一致</p><p>append()  直接拼接列表对象，而不是值</p></li><li><p>元组   与列表一致,只是元素不可改变</p><p>tuple()将其他类型转化成元组</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解构赋值 </span></span><br><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">a, b, c = my_tuple</span><br><span class="line"><span class="built_in">print</span>(a, b, c) </span><br></pre></td></tr></table></figure><ol start="7"><li><p>字典  dict   &lt;% label 键值对 pink%&gt;</p><p>类似于json</p><p>person &#x3D;  {  “name”:   “小明” }</p><p>person[“name”]   取出字典中的元素</p></li></ol><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li>and   与     类似   &amp;&amp;</li><li>or      或     类似   |</li><li>not    非      类似  ！</li></ul><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><ul><li>&lt;% label is green%&gt; 和 is not  判断引用对象是否是同一个</li><li>&#x3D;&#x3D;是判断引用对象的值是否相等</li></ul><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><p>1.条件控制语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>  条件:</span><br><span class="line"><span class="keyword">elif</span> 条件: </span><br><span class="line"><span class="keyword">else</span>:</span><br></pre></td></tr></table></figure><p>2.循环控制语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>  条件:</span><br><span class="line">语句</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 循环变量 <span class="keyword">in</span> 条件:</span><br><span class="line">    语句  <span class="comment"># 循环变量是列表中的每一项 </span></span><br><span class="line"><span class="keyword">else</span>: 循环语句中出现<span class="keyword">break</span>,不执行</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>函数定义关键字  def</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TODO 一般用来标识自己待做的事情</span></span><br><span class="line"><span class="comment"># python中都是引用传值 id() ==&gt; 查看变量地址</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printHello</span>(<span class="params">num=<span class="number">19</span>, *args, **dicts</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    缺省参数：具有默认值的参数 ==》 num</span></span><br><span class="line"><span class="string">    多值参数：*args接收元组  **kwargs接收字典</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">person = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;阿炳&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">print_hello(num=<span class="number">20</span>, <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,**person)</span><br></pre></td></tr></table></figure><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul><li>对象名一般采用大驼峰法</li><li>__ 双下划线代表私有</li><li>mro()方法可以查看方法解析顺序</li><li>装饰器<ol><li>@classmethod   类方法</li><li>@staticmethod   静态方法</li></ol></li><li>面向对象三大特性：</li></ul><ol><li>封装</li><li>继承<ul><li>单继承</li><li>多继承：可以继承多个父类</li><li>私有属性和私有方法不被继承</li></ul></li><li>多态</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>:</span><br><span class="line">    skill = <span class="string">&quot;唱歌&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mother</span>:</span><br><span class="line">    skill = <span class="string">&quot;跳舞&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singer</span>(Father, Mother):</span><br><span class="line">    name = <span class="literal">None</span>  <span class="comment"># 类属性 一个类只有一个</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, salary</span>):</span><br><span class="line">        self.salary = salary  <span class="comment"># 实例属性 每个对象都有</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;构造方法执行&quot;</span>)      </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        设置对象返回的内容,类似于java中的toString()</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好呀世界&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;对象已经被销毁了&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ul><li>raise：   手动抛异常</li><li>except：发生异常时执行</li><li>else：     未发生异常时执行</li><li>finally：  一定会执行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">except</span> 异常类型:</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">finally</span>:</span><br></pre></td></tr></table></figure><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ol><li>import 模块名  as  别名   直接导入模块</li><li>from ···  import     导入模块中指定内容</li></ol><h3 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h3><h4 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a>两种方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fp = <span class="built_in">open</span>(<span class="string">&quot;文件名&quot;</span>, <span class="string">&quot;操作文件权限&quot;</span>, encoding=<span class="string">&quot;编码格式&quot;</span>)</span><br><span class="line">fp.read()        <span class="comment"># 读取文件内容   </span></span><br><span class="line">fp.write(<span class="string">&quot;内容&quot;</span>)  <span class="comment"># 向文件写内容</span></span><br><span class="line">fp.close()       <span class="comment"># 关闭流</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;文件名&quot;</span>, <span class="string">&quot;操作文件权限&quot;</span>, encoding=<span class="string">&quot;编码格式&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.read()  <span class="comment"># 读取文件内容</span></span><br><span class="line">    fp.write(<span class="string">&quot;内容&quot;</span>)  <span class="comment"># 向文件写内容</span></span><br><span class="line">    fp.close()  <span class="comment"># 关闭流</span></span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">操作文件  一个函数三个方法   <span class="built_in">open</span> read write close   <span class="built_in">open</span>未找到文件自动创建一个</span><br><span class="line">    <span class="string">&#x27;r&#x27;</span>     <span class="built_in">open</span> <span class="keyword">for</span> reading (default)</span><br><span class="line">    <span class="string">&#x27;w&#x27;</span>     <span class="built_in">open</span> <span class="keyword">for</span> writing, truncating the file first</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span>     create a new file <span class="keyword">and</span> <span class="built_in">open</span> it <span class="keyword">for</span> writing</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>     <span class="built_in">open</span> <span class="keyword">for</span> writing, appending to the end of the file <span class="keyword">if</span> it exists</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>     binary mode</span><br><span class="line">    <span class="string">&#x27;t&#x27;</span>     text mode (default)</span><br><span class="line">    <span class="string">&#x27;+&#x27;</span>     <span class="built_in">open</span> a disk file <span class="keyword">for</span> updating (reading <span class="keyword">and</span> writing)</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span>     universal newline mode (deprecated)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫</title>
      <link href="/2022/08/08/spider/"/>
      <url>/2022/08/08/spider/</url>
      
        <content type="html"><![CDATA[<h2 id="scrapy-爬虫框架"><a href="#scrapy-爬虫框架" class="headerlink" title="scrapy-爬虫框架"></a>scrapy-爬虫框架</h2><blockquote><p>scrapy  startproject   工程名</p><p>cd 工程名  尽量符合命名标准，不使用数字开头</p><p>scrapy genspider 爬虫文件的名字  需要爬取的网址</p><p>scrapy crawl 爬虫文件的名字   name     crawl &#x3D;&gt; 爬</p></blockquote><h3 id="requests请求库"><a href="#requests请求库" class="headerlink" title="requests请求库"></a>requests请求库</h3><h2 id="查看各大网站中的君子协议"><a href="#查看各大网站中的君子协议" class="headerlink" title="查看各大网站中的君子协议"></a>查看各大网站中的君子协议</h2><blockquote><p><a href="https://www.baidu.com/robots.txt">https://www.baidu.com/robots.txt</a></p></blockquote><h2 id="爬虫模板"><a href="#爬虫模板" class="headerlink" title="爬虫模板"></a>爬虫模板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaiduSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;Baidu&#x27;</span>  <span class="comment"># 爬虫的名字 用于运行爬虫使用的值</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;www.baidu.com&#x27;</span>]  <span class="comment"># 允许访问的域名</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.baidu.com/&#x27;</span>]  <span class="comment"># 起始的访问地址</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        在start_urls之后自动执行的方法</span></span><br><span class="line"><span class="string">        :param response: response = requests.get()</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你好呀世界&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#response的属性和方法</span></span><br><span class="line">    <span class="comment">#response.text  获取响应的字符串</span></span><br><span class="line">    <span class="comment">#response.body  获取的是二进制数据</span></span><br><span class="line">    <span class="comment">#response.xpath() 通过xpath解析自己想要的内容</span></span><br><span class="line">    <span class="comment">#response.extract() 提取selector对象中的data属性  extract =》 取出</span></span><br><span class="line">    <span class="comment">#response.extract_first() 提取selector列表中的第一个数据</span></span><br></pre></td></tr></table></figure><h2 id="scrapy框架工程结构"><a href="#scrapy框架工程结构" class="headerlink" title="scrapy框架工程结构"></a>scrapy框架工程结构</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">工程名</span><br><span class="line">  工程名</span><br><span class="line">    spiders文件夹    存放爬虫文件的地方，核心功能文件</span><br><span class="line">    <span class="built_in">_</span><span class="built_in">_</span>init<span class="built_in">_</span><span class="built_in">_</span>.py</span><br><span class="line">    items.py        定义返回数据结构</span><br><span class="line">    middlewares.py  中间件  代理</span><br><span class="line">    pipelines.py    管道，处理下载的数据</span><br><span class="line">    settings.py     配置设置  robots协议 ua定义</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> spider </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
